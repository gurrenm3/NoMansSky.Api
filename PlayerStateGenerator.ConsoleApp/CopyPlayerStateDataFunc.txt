void __fastcall PossibleCopyPlayerState(__int64 newPlayerStateAddr, __int64 oldPlayerStateAddr, __int64 a3, char a4)
{
  __int64 oldPlayerStateAddr2; // r15
  __int64 v7; // rax
  void *v8; // rax
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 v11; // rbx
  __m128 v12; // xmm6
  __m128 v13; // xmm7
  __m128 v14; // xmm4
  __m128 v15; // xmm5
  __int64 *v16; // rsi
  __int64 v17; // rdi
  __int64 v18; // rbx
  __int64 v19; // rdx
  __int64 v20; // r9
  int v21; // er12
  __int64 v22; // r13
  unsigned __int64 v23; // r8
  const struct physx::PxJointLinearLimit *v24; // rbx
  __int64 v25; // r14
  __int64 v26; // rdi
  __int64 v27; // r8
  __int64 v28; // rdi
  char *newPlayerStateAddr2; // r14
  const struct physx::PxJointLinearLimit *v30; // rsi
  const struct physx::PxJointLinearLimit *v31; // r13
  const struct physx::PxJointLinearLimit *v32; // rbx
  char *v33; // rax
  int v34; // eax
  __int64 v35; // rbx
  __int64 v36; // rdi
  __int64 v37; // r13
  __int64 v38; // rcx
  __int64 v39; // r8
  __int64 v40; // rdx
  int v41; // ebx
  _BYTE *v42; // rsi
  __int64 v43; // rax
  __int16 v44; // cx
  __int16 v45; // dx
  char *v46; // rdi
  __int64 v47; // rbx
  __int64 v48; // rsi
  __int64 v49; // rdx
  __int64 v50; // rax
  int v51; // ecx
  __int64 v52; // rax
  int v53; // ebx
  int v54; // edi
  __int64 v55; // rsi
  int v56; // edi
  char v57; // bl
  __int64 v58; // rsi
  char v59; // r13
  __int128 v60; // xmm0
  char *v61; // rbx
  __int64 v62; // rdx
  int *v63; // rdi
  int *v64; // r8
  int v65; // er10
  __int64 v66; // r11
  __int128 *oldInventorAdr; // rdi
  __int128 *v68; // rbx
  char *v69; // r13
  __int64 v70; // rax
  __int64 v71; // rsi
  __int64 v72; // rax
  _QWORD *v73; // rcx
  char v74; // dl
  int v75; // ecx
  int v76; // eax
  _OWORD *v77; // rdx
  __int64 v78; // rax
  __int64 v79; // rcx
  __int64 v80; // rax
  __int64 v81; // rcx
  int v82; // edi
  __int64 v83; // rbx
  __int64 v84; // rax
  __int64 v85; // rax
  __int64 v86; // rax
  unsigned int v87; // edi
  __int64 v88; // rax
  __int64 v89; // rax
  __int64 v90; // rax
  __int64 v91; // rax
  int v92; // edi
  __int64 v93; // rsi
  __int64 v94; // r13
  unsigned __int8 v95; // bl
  __int64 v96; // rax
  __int64 v97; // rax
  __int64 v98; // rax
  int v99; // edi
  __int64 v100; // rbx
  __int64 v101; // rax
  __int64 v102; // r9
  __int64 v103; // rax
  __int64 v104; // rax
  __int64 v105; // rcx
  __int64 v106; // rax
  __int64 v107; // rcx
  int v108; // edi
  __int64 *v109; // rax
  __int64 v110; // r9
  __int64 v111; // rcx
  char *v112; // r15
  char v113; // r13
  __int64 v114; // rdx
  __int64 v115; // r8
  unsigned __int64 i; // rdi
  char v117; // cl
  __int64 v118; // rdi
  int *v119; // rsi
  bool v120; // zf
  __int64 oldPlayerStateAddr3; // r15
  __int128 *v122; // rdi
  __int128 *v123; // rbx
  __int64 v124; // rax
  _OWORD *v125; // rdx
  int *v126; // rdx
  char *v127; // rcx
  __int64 v128; // rax
  int newPlayerStateAddr3Plus1; // eax
  __int64 v130; // rsi
  __int64 v131; // rbx
  __m128i *v132; // rdx
  __int64 v133; // r13
  unsigned __int32 v134; // edi
  __int64 *v135; // rax
  __int64 v136; // r13
  int v137; // ebx
  __int64 v138; // rax
  __int64 v139; // rdi
  int v140; // edi
  __int64 v141; // rbx
  _OWORD *v142; // rcx
  int v143; // eax
  __int64 v144; // rax
  __int64 v145; // rax
  unsigned __int64 v146; // rdi
  __int64 v147; // rax
  char v148; // r13
  int j; // esi
  __int64 v150; // rax
  int newPlayerStateAddr4; // edi
  __int64 v152; // rax
  __int64 v153; // r9
  __int64 v154; // rbx
  int v155; // er10
  int v156; // er15
  int v157; // er11
  int v158; // er8
  int v159; // edx
  __int64 v160; // rax
  unsigned __int8 v161; // cl
  int v162; // eax
  int v163; // edi
  int v164; // ecx
  __int64 v165; // rax
  __int64 v166; // rbx
  int newPlayerStateAddr5; // edi
  __int64 v168; // rax
  __int64 v169; // rax
  __int64 v170; // rbx
  __int64 v171; // rax
  unsigned __int64 v172; // rax
  unsigned __int64 v173; // r8
  unsigned __int128 v174; // rax
  unsigned __int64 v175; // rcx
  __int128 *v176; // rbx
  __int128 *k; // rdi
  int v178; // edx
  _OWORD *v179; // rdi
  _OWORD *v180; // rbx
  __int64 v181; // rax
  _QWORD *v182; // r8
  _QWORD *v183; // rcx
  _OWORD *v184; // rdx
  _OWORD *v185; // rax
  char *v186; // rcx
  __int64 v187; // rax
  _QWORD *v188; // rdi
  _QWORD *l; // rbx
  __int64 v190; // rax
  __int64 v191; // rax
  __int64 v192; // rsi
  _QWORD *v193; // rcx
  _OWORD *v194; // rdx
  _OWORD *v195; // rax
  _OWORD *v196; // r8
  __int64 v197; // rax
  _QWORD *v198; // rcx
  _QWORD *v199; // rax
  __int64 v200; // rax
  __int64 v201; // r8
  _QWORD *v202; // rcx
  _OWORD *v203; // rdx
  _OWORD *v204; // rax
  __int64 v205; // rsi
  __int64 v206; // rdi
  __int64 v207; // rax
  __int64 v208; // rax
  __int128 *v209; // r13
  int v210; // edx
  _QWORD *v211; // rdi
  _QWORD *m; // rbx
  __int64 v213; // rcx
  _QWORD *v214; // rax
  __int64 v215; // rcx
  __int64 v216; // r10
  __int64 v217; // r8
  __int64 v218; // r9
  _QWORD *v219; // rax
  _OWORD *v220; // rcx
  __int64 v221; // rax
  __int128 *v222; // rdi
  __int128 *v223; // rbx
  __int128 **v224; // rsi
  __int128 v225; // xmm1
  __int128 *v226; // rax
  __int128 *v227; // rcx
  __int128 *v228; // rdx
  __int64 v229; // rdi
  __int64 n; // rbx
  __int64 v231; // rdx
  __int64 v232; // rax
  __int64 v233; // rax
  _DWORD *v234; // rax
  _OWORD *v235; // rdi
  _OWORD *ii; // rbx
  _OWORD *v237; // rdx
  _OWORD *v238; // rax
  __int64 v239; // rcx
  __int64 v240; // rax
  __int64 v241; // rax
  __int64 v242; // rax
  __int64 v243; // rax
  __int64 v244; // rax
  int v245; // eax
  __int64 v246; // rax
  __int64 v247; // rax
  __int64 v248; // rax
  __int64 v249; // rax
  __int64 v250; // rsi
  unsigned __int16 v251; // di
  __int64 v252; // rax
  __int64 v253; // r8
  __int64 v254; // rbx
  unsigned int v255; // eax
  int v256; // eax
  int v257; // ecx
  int v258; // eax
  int v259; // ecx
  int v260; // eax
  int v261; // ecx
  int v262; // eax
  int v263; // ecx
  int v264; // esi
  __int64 v265; // rbx
  _OWORD *v266; // r8
  _OWORD *v267; // rdx
  int v268; // eax
  __int64 v269; // rax
  __int64 v270; // rax
  int v271; // ebx
  __int64 v272; // rax
  unsigned int v273; // edi
  __int64 v274; // rax
  __int64 v275; // rax
  __int64 v276; // rax
  __int64 v277; // rax
  void *v278; // rdx
  int v279; // ecx
  __int64 v280; // rax
  __int64 v281; // rdx
  void *v282; // rdx
  __m128i v283; // xmm3
  __m128i v284; // xmm5
  __m128i v285; // xmm6
  __m128i v286; // xmm1
  __m128i v287; // xmm4
  __m128i v288; // xmm2
  unsigned __int64 jj; // rdx
  __int8 v290; // cl
  __m128i v291; // xmm1
  __m128i v292; // xmm2
  unsigned __int64 kk; // rdx
  __int8 v294; // cl
  unsigned __int64 ll; // rdx
  char v296; // cl
  __int64 v297; // rax
  __int64 *v298; // rdx
  __int64 *v299; // r8
  __int64 v300; // rcx
  int v301; // edi
  _QWORD *v302; // rdi
  _QWORD *v303; // rbx
  _OWORD *v304; // rsi
  int v305; // esi
  __int64 v306; // rbx
  _OWORD *v307; // r8
  _OWORD *v308; // rdx
  char *v309; // r13
  char *v310; // rdi
  __int64 v311; // rbx
  __int64 v312; // rax
  __int64 v313; // rdi
  char *v314; // rsi
  char *v315; // rbx
  __int64 v316; // rax
  int v317; // eax
  __int64 v318; // rdx
  __int64 v319; // rax
  __int64 v320; // rax
  __m128 v321; // xmm4
  int mm; // edi
  int nn; // edi
  __int64 v324; // rax
  __int64 v325; // rax
  __m128 v326; // xmm6
  __m128 v327; // xmm7
  __m128 v328; // xmm4
  __m128 v329; // xmm5
  __int128 *v330; // rax
  char v331; // al
  __int64 v332; // rbx
  int v333; // edx
  int *v334; // rcx
  int v335; // eax
  __int64 v336; // rax
  __int64 v337; // rdx
  __int64 v338; // rcx
  __int64 v339; // rcx
  __int64 v340; // rcx
  bool v341; // di
  __int64 v342; // rax
  __int64 v343; // rbx
  __int64 v344; // rcx
  __int128 *v345; // rbx
  __int128 *i1; // rdi
  int v347; // edx
  __int128 *v348; // rbx
  __int128 *i2; // rdi
  int v350; // edx
  __int128 *v351; // rbx
  __int128 *i3; // rdi
  int v353; // edx
  int v354; // ebx
  __int64 v355; // rax
  char *v356; // rdi
  __int64 v357; // rax
  __int64 v358; // rax
  __int64 v359; // rdx
  __int64 v360; // r8
  __int64 v361; // r9
  __int64 v362; // rdx
  __int64 v363; // r8
  __int64 v364; // r9
  char v365; // [rsp+50h] [rbp-B0h]
  __int64 v366; // [rsp+58h] [rbp-A8h]
  __int64 v367; // [rsp+58h] [rbp-A8h]
  __int64 v368; // [rsp+58h] [rbp-A8h]
  __int64 v369; // [rsp+58h] [rbp-A8h]
  __int64 v370; // [rsp+58h] [rbp-A8h]
  const struct physx::PxJointLinearLimit *v371; // [rsp+60h] [rbp-A0h]
  int v372; // [rsp+60h] [rbp-A0h]
  __int64 v373; // [rsp+60h] [rbp-A0h]
  __int64 v374; // [rsp+60h] [rbp-A0h]
  __int128 v375; // [rsp+68h] [rbp-98h] BYREF
  unsigned int v376; // [rsp+78h] [rbp-88h] BYREF
  unsigned int v377; // [rsp+7Ch] [rbp-84h]
  int v378; // [rsp+80h] [rbp-80h] BYREF
  bool v379; // [rsp+84h] [rbp-7Ch]
  bool v380; // [rsp+85h] [rbp-7Bh]
  bool v381; // [rsp+86h] [rbp-7Ah]
  bool v382; // [rsp+87h] [rbp-79h]
  bool v383; // [rsp+88h] [rbp-78h]
  __int64 v384; // [rsp+90h] [rbp-70h]
  __int64 *v385; // [rsp+98h] [rbp-68h] BYREF
  __int16 v386[3]; // [rsp+A0h] [rbp-60h] BYREF
  char v387; // [rsp+A6h] [rbp-5Ah]
  __int64 v388; // [rsp+A8h] [rbp-58h]
  int v389; // [rsp+B0h] [rbp-50h] BYREF
  int v390; // [rsp+B4h] [rbp-4Ch] BYREF
  int v391; // [rsp+B8h] [rbp-48h] BYREF
  int v392; // [rsp+BCh] [rbp-44h] BYREF
  int v393; // [rsp+C0h] [rbp-40h] BYREF
  int newPlayerStateAddr6; // [rsp+C4h] [rbp-3Ch] BYREF
  int newPlayerStateAddr7; // [rsp+C8h] [rbp-38h] BYREF
  int v396; // [rsp+CCh] [rbp-34h] BYREF
  unsigned __int16 v397; // [rsp+D0h] [rbp-30h]
  int v398; // [rsp+D4h] [rbp-2Ch] BYREF
  int v399; // [rsp+D8h] [rbp-28h] BYREF
  char *v400; // [rsp+E0h] [rbp-20h]
  int v401; // [rsp+E8h] [rbp-18h] BYREF
  int v402; // [rsp+ECh] [rbp-14h] BYREF
  __int64 v403; // [rsp+F0h] [rbp-10h]
  int v404; // [rsp+F8h] [rbp-8h] BYREF
  int v405; // [rsp+FCh] [rbp-4h] BYREF
  __int128 v406; // [rsp+100h] [rbp+0h] BYREF
  int *v407; // [rsp+110h] [rbp+10h]
  __int64 v408; // [rsp+118h] [rbp+18h] BYREF
  __int64 v409; // [rsp+120h] [rbp+20h]
  __int128 v410; // [rsp+128h] [rbp+28h] BYREF
  __m128i v411; // [rsp+138h] [rbp+38h] BYREF
  __int128 v412; // [rsp+148h] [rbp+48h]
  __int64 v413; // [rsp+158h] [rbp+58h]
  __m128i v414; // [rsp+160h] [rbp+60h] BYREF
  __int128 v415; // [rsp+170h] [rbp+70h]
  __int128 v416; // [rsp+180h] [rbp+80h] BYREF
  __int64 v417; // [rsp+190h] [rbp+90h]
  int v418[6]; // [rsp+198h] [rbp+98h] BYREF
  __int128 oldInventorAdr2; // [rsp+1B0h] [rbp+B0h] BYREF
  __int128 v420; // [rsp+1C0h] [rbp+C0h]
  __int128 v421; // [rsp+1D0h] [rbp+D0h]
  __int64 v422; // [rsp+1E0h] [rbp+E0h] BYREF
  __int64 v423; // [rsp+1E8h] [rbp+E8h] BYREF
  __int128 v424; // [rsp+1F0h] [rbp+F0h] BYREF
  __int128 v425; // [rsp+200h] [rbp+100h] BYREF
  __int128 v426; // [rsp+210h] [rbp+110h] BYREF
  __int128 v427; // [rsp+220h] [rbp+120h] BYREF
  int v428; // [rsp+230h] [rbp+130h]
  __int64 v429; // [rsp+238h] [rbp+138h] BYREF
  char v430; // [rsp+240h] [rbp+140h]
  int v431; // [rsp+248h] [rbp+148h]
  int v432; // [rsp+250h] [rbp+150h]
  __int64 v433; // [rsp+258h] [rbp+158h] BYREF
  char v434; // [rsp+260h] [rbp+160h]
  int v435; // [rsp+268h] [rbp+168h]
  __int128 v436; // [rsp+270h] [rbp+170h] BYREF
  int v437; // [rsp+280h] [rbp+180h] BYREF
  __int128 v438; // [rsp+288h] [rbp+188h]
  int v439; // [rsp+298h] [rbp+198h]
  int v440; // [rsp+29Ch] [rbp+19Ch]
  __int64 v441; // [rsp+2A8h] [rbp+1A8h]
  int v442; // [rsp+2B0h] [rbp+1B0h] BYREF
  __int64 v443; // [rsp+2B8h] [rbp+1B8h]
  char v444; // [rsp+2C0h] [rbp+1C0h]
  int v445; // [rsp+2C8h] [rbp+1C8h]
  int v446; // [rsp+2D0h] [rbp+1D0h] BYREF
  __int64 v447; // [rsp+2D8h] [rbp+1D8h]
  char v448; // [rsp+2E0h] [rbp+1E0h]
  int v449; // [rsp+2E8h] [rbp+1E8h]
  __int128 v450; // [rsp+2F0h] [rbp+1F0h]
  __int128 v451; // [rsp+300h] [rbp+200h] BYREF
  __int128 v452; // [rsp+310h] [rbp+210h]
  __int64 v453; // [rsp+320h] [rbp+220h]
  __int64 v454; // [rsp+328h] [rbp+228h] BYREF
  char v455; // [rsp+330h] [rbp+230h]
  __int64 v456; // [rsp+338h] [rbp+238h] BYREF
  char v457; // [rsp+340h] [rbp+240h]
  __int64 v458; // [rsp+348h] [rbp+248h] BYREF
  char v459; // [rsp+350h] [rbp+250h]
  __int64 v460; // [rsp+358h] [rbp+258h] BYREF
  char v461; // [rsp+360h] [rbp+260h]
  __int64 v462; // [rsp+368h] [rbp+268h] BYREF
  char v463; // [rsp+370h] [rbp+270h]
  char v464[8]; // [rsp+378h] [rbp+278h] BYREF
  __int64 v465; // [rsp+380h] [rbp+280h]
  char v466; // [rsp+388h] [rbp+288h]
  __m128i v467; // [rsp+398h] [rbp+298h] BYREF
  int v468; // [rsp+3A8h] [rbp+2A8h]
  int v469; // [rsp+3ACh] [rbp+2ACh]
  int v470; // [rsp+3B0h] [rbp+2B0h]
  __int128 v471; // [rsp+3B8h] [rbp+2B8h] BYREF
  __int64 v472; // [rsp+3C8h] [rbp+2C8h]
  __int128 v473; // [rsp+3D0h] [rbp+2D0h] BYREF
  __int64 v474; // [rsp+3E0h] [rbp+2E0h]
  __int128 v475; // [rsp+3E8h] [rbp+2E8h] BYREF
  __int64 v476; // [rsp+3F8h] [rbp+2F8h]
  __int128 v477; // [rsp+400h] [rbp+300h] BYREF
  __int128 v478; // [rsp+410h] [rbp+310h]
  __int128 v479; // [rsp+420h] [rbp+320h]
  int v480; // [rsp+430h] [rbp+330h] BYREF
  __int64 v481; // [rsp+438h] [rbp+338h]
  char v482; // [rsp+440h] [rbp+340h]
  int v483; // [rsp+448h] [rbp+348h]
  __int64 v484; // [rsp+450h] [rbp+350h]
  __int64 v485; // [rsp+458h] [rbp+358h]
  __int64 v486; // [rsp+460h] [rbp+360h]
  __int64 v487; // [rsp+468h] [rbp+368h]
  __int64 v488; // [rsp+470h] [rbp+370h]
  __int64 v489; // [rsp+478h] [rbp+378h]
  __int64 v490; // [rsp+480h] [rbp+380h]
  __int64 v491; // [rsp+488h] [rbp+388h]
  __m128 v492; // [rsp+490h] [rbp+390h] BYREF
  __m128 v493; // [rsp+4A0h] [rbp+3A0h]
  __m128 v494; // [rsp+4B0h] [rbp+3B0h]
  __int128 v495; // [rsp+4C0h] [rbp+3C0h]
  __int64 v496; // [rsp+4D0h] [rbp+3D0h]
  __int64 v497; // [rsp+4D8h] [rbp+3D8h]
  __int64 v498; // [rsp+4E0h] [rbp+3E0h]
  __int64 v499; // [rsp+4E8h] [rbp+3E8h]
  __m128 v500; // [rsp+4F0h] [rbp+3F0h]
  __m128 v501; // [rsp+500h] [rbp+400h]
  __m128 v502; // [rsp+510h] [rbp+410h]
  __int128 v503; // [rsp+520h] [rbp+420h]
  __int128 v504[4]; // [rsp+530h] [rbp+430h] BYREF
  __m128 v505; // [rsp+570h] [rbp+470h]
  __m128 v506; // [rsp+580h] [rbp+480h]
  __m128 v507; // [rsp+590h] [rbp+490h]
  __m128 v508; // [rsp+5A0h] [rbp+4A0h]
  __m128 v509; // [rsp+5B0h] [rbp+4B0h]
  __m128 v510; // [rsp+5C0h] [rbp+4C0h]
  __m128 v511; // [rsp+5D0h] [rbp+4D0h]
  __m128 v512; // [rsp+5E0h] [rbp+4E0h]
  __m128 v513; // [rsp+5F0h] [rbp+4F0h]
  __m128 v514; // [rsp+600h] [rbp+500h]
  __m128 v515; // [rsp+610h] [rbp+510h]
  char v516[16]; // [rsp+620h] [rbp+520h] BYREF
  __m128 v517; // [rsp+630h] [rbp+530h]
  __m128 v518; // [rsp+640h] [rbp+540h]
  __m128 v519; // [rsp+650h] [rbp+550h]
  __m128 v520; // [rsp+660h] [rbp+560h]
  __m128 v521; // [rsp+670h] [rbp+570h]
  char v522[8]; // [rsp+680h] [rbp+580h] BYREF
  __int64 v523; // [rsp+688h] [rbp+588h]
  char v524; // [rsp+690h] [rbp+590h]
  __int64 v525; // [rsp+6A0h] [rbp+5A0h] BYREF
  int v526; // [rsp+6A8h] [rbp+5A8h]
  char v527; // [rsp+6ACh] [rbp+5ACh]
  __int64 v528; // [rsp+6B0h] [rbp+5B0h]
  int v529; // [rsp+6B8h] [rbp+5B8h]
  char v530; // [rsp+6BCh] [rbp+5BCh]
  __int64 v531; // [rsp+6C0h] [rbp+5C0h]
  __int64 v532; // [rsp+6C8h] [rbp+5C8h]
  int v533; // [rsp+6D0h] [rbp+5D0h]
  char v534; // [rsp+6D4h] [rbp+5D4h]
  __int64 v535; // [rsp+6D8h] [rbp+5D8h]
  int v536; // [rsp+6E0h] [rbp+5E0h]
  char v537; // [rsp+6E4h] [rbp+5E4h]
  char v538; // [rsp+6F1h] [rbp+5F1h]
  __int128 v539; // [rsp+7F8h] [rbp+6F8h]
  char v540; // [rsp+808h] [rbp+708h]
  char v541[128]; // [rsp+838h] [rbp+738h] BYREF
  int v542; // [rsp+8B8h] [rbp+7B8h] BYREF
  __int64 v543; // [rsp+8C0h] [rbp+7C0h]
  char v544; // [rsp+8C8h] [rbp+7C8h]
  char v545; // [rsp+8D0h] [rbp+7D0h]
  __int64 v546; // [rsp+AD0h] [rbp+9D0h] BYREF
  int v547; // [rsp+AD8h] [rbp+9D8h]
  char v548; // [rsp+ADCh] [rbp+9DCh]
  char v549[256]; // [rsp+AE0h] [rbp+9E0h] BYREF
  int v550[4]; // [rsp+BE0h] [rbp+AE0h] BYREF
  char v551[72]; // [rsp+BF0h] [rbp+AF0h] BYREF
  int v552; // [rsp+C38h] [rbp+B38h]
  int v553; // [rsp+C3Ch] [rbp+B3Ch]
  int v554; // [rsp+D44h] [rbp+C44h]
  char v555[72]; // [rsp+D50h] [rbp+C50h] BYREF
  int v556; // [rsp+D98h] [rbp+C98h]
  int v557; // [rsp+D9Ch] [rbp+C9Ch]
  int v558; // [rsp+EA4h] [rbp+DA4h]
  char v559[136]; // [rsp+EB0h] [rbp+DB0h] BYREF
  __int64 v560; // [rsp+F38h] [rbp+E38h]
  __int64 v561; // [rsp+F40h] [rbp+E40h]
  char v562[8]; // [rsp+10C8h] [rbp+FC8h] BYREF
  char v563[64]; // [rsp+10D0h] [rbp+FD0h] BYREF
  char v564[256]; // [rsp+1110h] [rbp+1010h] BYREF
  void *newPlayerStateAddr1; // [rsp+1290h] [rbp+1190h] BYREF
  __int64 oldPlayerStateAddr1; // [rsp+1298h] [rbp+1198h]
  char v567; // [rsp+12A8h] [rbp+11A8h]

  v567 = a4;
  oldPlayerStateAddr1 = oldPlayerStateAddr;
  newPlayerStateAddr1 = newPlayerStateAddr;
  v489 = -2i64;
  oldPlayerStateAddr2 = oldPlayerStateAddr;
  v7 = GetPlayerStateAddr(&unk_1437E2980);
  v8 = sub_140734120(v7, v564);
  v400 = sub_1403261F0(v8, 0i64, 1);
  PossibleNewPlayerStateCtor(newPlayerStateAddr);
  *(newPlayerStateAddr + 54526) = *(oldPlayerStateAddr2 + 47804);
  if ( !dword_1437E29C4 || dword_1437E29C4 == 6 )
    sub_1407B90C0(newPlayerStateAddr + 363896);
  v9 = GetPlayerStateAddr(&unk_1437E2980);
  sub_14073D190(v9 + 1636024, oldPlayerStateAddr2 + 308, *(newPlayerStateAddr + 54526));
  if ( *(newPlayerStateAddr + 54526) || (v365 = 0, a4) )
    v365 = 1;
  *(newPlayerStateAddr + 444) = *(oldPlayerStateAddr2 + 41508);
  *(newPlayerStateAddr + 448) = *(oldPlayerStateAddr2 + 41512);
  *(newPlayerStateAddr + 452) = *(oldPlayerStateAddr2 + 41516);
  *(newPlayerStateAddr + 48844) = *(oldPlayerStateAddr2 + 47800);
  sub_1408CA740(newPlayerStateAddr + 58240, oldPlayerStateAddr2 + 41392);
  sub_1408CA740(newPlayerStateAddr + 58272, oldPlayerStateAddr2 + 41424);
  sub_1408CA740(newPlayerStateAddr + 58304, oldPlayerStateAddr2 + 41456);
  *(newPlayerStateAddr + 59264) = *(oldPlayerStateAddr2 + 342816);
  *(newPlayerStateAddr + 59268) = *(oldPlayerStateAddr2 + 342820);
  *(newPlayerStateAddr + 436) = *(oldPlayerStateAddr2 + 41488);
  *(newPlayerStateAddr + 432) = *(oldPlayerStateAddr2 + 41496);
  *(newPlayerStateAddr + 440) = *(oldPlayerStateAddr2 + 41492);
  sub_14081DAF0(newPlayerStateAddr, oldPlayerStateAddr2);
  *(newPlayerStateAddr + 48808) = *(oldPlayerStateAddr2 + 41528);
  *(newPlayerStateAddr + 48800) = *(oldPlayerStateAddr2 + 41536);
  *(newPlayerStateAddr + 48824) = *(oldPlayerStateAddr2 + 48496);
  *(newPlayerStateAddr + 54416) = *(oldPlayerStateAddr2 + 47796);
  *(newPlayerStateAddr + 59272) = *(oldPlayerStateAddr2 + 346616);
  *(newPlayerStateAddr + 59276) = *(oldPlayerStateAddr2 + 41520);
  *(newPlayerStateAddr + 59277) = *(oldPlayerStateAddr2 + 346612);
  *(newPlayerStateAddr + 54424) = *(oldPlayerStateAddr2 + 48360);
  *(newPlayerStateAddr + 54525) = *(oldPlayerStateAddr2 + 47805);
  v10 = sub_14031DD80(&unk_1437E2980);
  if ( sub_140F5F300(v10 + 16, 0i64) )
  {
    physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
      (newPlayerStateAddr + 336),
      (oldPlayerStateAddr2 + 48416));
    physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
      (newPlayerStateAddr + 360),
      (oldPlayerStateAddr2 + 48440));
  }
  physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
    (newPlayerStateAddr + 384),
    oldPlayerStateAddr2);
  physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
    (newPlayerStateAddr + 408),
    (oldPlayerStateAddr2 + 24));
  *(newPlayerStateAddr + 54522) = *(oldPlayerStateAddr2 + 48504);
  if ( *(oldPlayerStateAddr2 + 488084) )
  {
    dword_1437E29F0 = 2;
    qword_1437E2A00 = -1i64;
    sub_1422DD460(&unk_1437E2980, &qword_143C79E90, 1004i64, 0i64);
  }
  else if ( qword_1437E2A00 != -1 && qword_1437E2A00 != 0x20000000000i64 )
  {
    v418[0] = BYTE4(qword_1437E2A00);
    v418[1] = (qword_1437E2A00 << 20) >> 20;
    v418[2] = qword_1437E2A00 >> 24;
    v418[3] = (qword_1437E2A00 << 8) >> 20;
    v418[4] = (HIDWORD(qword_1437E2A00) >> 8) & 0xFFF;
    v418[5] = (HIDWORD(qword_1437E2A00) >> 20) & 0xF;
    physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues((newPlayerStateAddr + 384), v418);
  }
  *(newPlayerStateAddr + 54384) = *(oldPlayerStateAddr2 + 41984);
  *(newPlayerStateAddr + 54400) = *(oldPlayerStateAddr2 + 48480);
  *(newPlayerStateAddr + 58368) = *(oldPlayerStateAddr2 + 342544);
  *(newPlayerStateAddr + 58384) = *(oldPlayerStateAddr2 + 342560);
  if ( *(oldPlayerStateAddr2 + 48492) < 0.0 )
    *(newPlayerStateAddr + 54400) = *(newPlayerStateAddr + 54384);
  if ( *(oldPlayerStateAddr2 + 40224)
    && !sub_1408DC940(oldPlayerStateAddr2 + 40228, newPlayerStateAddr + 384)
    && sub_1408DC940(oldPlayerStateAddr2 + 40228, oldPlayerStateAddr2 + 344936) )
  {
    *(newPlayerStateAddr + 54304) = 257;
    v11 = newPlayerStateAddr + 54208;
    physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
      (newPlayerStateAddr + 54208),
      (newPlayerStateAddr + 384));
    *(newPlayerStateAddr + 54240) = xmmword_143C79DB0;
    *(newPlayerStateAddr + 54256) = xmmword_143C79DC0;
    *(newPlayerStateAddr + 54272) = xmmword_143C79DD0;
    *(newPlayerStateAddr + 54288) = xmmword_143C79DE0;
  }
  else
  {
    *(newPlayerStateAddr + 54304) = *(oldPlayerStateAddr2 + 40224);
    v11 = newPlayerStateAddr + 54208;
    physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
      (newPlayerStateAddr + 54208),
      (oldPlayerStateAddr2 + 40228));
    *(newPlayerStateAddr + 54305) = *(oldPlayerStateAddr2 + 40225);
    v505 = _mm_unpacklo_ps(
             _mm_unpacklo_ps(
               *(oldPlayerStateAddr2 + 40288),
               _mm_shuffle_ps(*(oldPlayerStateAddr2 + 40288), *(oldPlayerStateAddr2 + 40288), 170)),
             _mm_unpacklo_ps(
               _mm_shuffle_ps(*(oldPlayerStateAddr2 + 40288), *(oldPlayerStateAddr2 + 40288), 85),
               0x3F800000u));
    v506 = _mm_unpacklo_ps(
             _mm_unpacklo_ps(
               *(oldPlayerStateAddr2 + 40272),
               _mm_shuffle_ps(*(oldPlayerStateAddr2 + 40272), *(oldPlayerStateAddr2 + 40272), 170)),
             _mm_unpacklo_ps(
               _mm_shuffle_ps(*(oldPlayerStateAddr2 + 40272), *(oldPlayerStateAddr2 + 40272), 85),
               0x3F800000u));
    v503 = *&xmmword_1429F0580;
    v502 = v506;
    v12 = _mm_shuffle_ps(v506, v506, 201);
    v13 = _mm_shuffle_ps(v506, v506, 210);
    v14 = _mm_sub_ps(_mm_mul_ps(v13, _mm_shuffle_ps(v505, v505, 201)), _mm_mul_ps(_mm_shuffle_ps(v505, v505, 210), v12));
    v507 = _mm_mul_ps(v14, v14);
    v520 = v507;
    v15 = 0x3F800000u;
    v15.m128_f32[0] = 1.0
                    / fsqrt(
                        (v507.m128_f32[0] + _mm_shuffle_ps(v507, v507, 85).m128_f32[0])
                      + _mm_shuffle_ps(v507, v507, 170).m128_f32[0]);
    v519 = v15;
    v517 = v15;
    v500 = _mm_mul_ps(_mm_shuffle_ps(v15, v15, 0), v14);
    v501 = _mm_sub_ps(
             _mm_mul_ps(_mm_shuffle_ps(v500, v500, 210), v12),
             _mm_mul_ps(v13, _mm_shuffle_ps(v500, v500, 201)));
    *(newPlayerStateAddr + 54240) = v500;
    *(newPlayerStateAddr + 54256) = v501;
    *(newPlayerStateAddr + 54272) = v502;
    *(newPlayerStateAddr + 54288) = v503;
    *(newPlayerStateAddr + 54288) = _mm_unpacklo_ps(
                                      _mm_unpacklo_ps(
                                        *(oldPlayerStateAddr2 + 40256),
                                        _mm_shuffle_ps(
                                          *(oldPlayerStateAddr2 + 40256),
                                          *(oldPlayerStateAddr2 + 40256),
                                          170)),
                                      _mm_unpacklo_ps(
                                        _mm_shuffle_ps(
                                          *(oldPlayerStateAddr2 + 40256),
                                          *(oldPlayerStateAddr2 + 40256),
                                          85),
                                        0x3F800000u));
  }
  if ( sub_1408DC940(v11, newPlayerStateAddr + 384) )
    *(newPlayerStateAddr + 54306) = *(newPlayerStateAddr + 54304);
  v16 = (newPlayerStateAddr + 54312);
  v17 = oldPlayerStateAddr2 + 47272;
  v18 = 10i64;
  do
  {
    v19 = *(newPlayerStateAddr + 54320);
    if ( *(newPlayerStateAddr + 54328) == v19 )
    {
      sub_1407A2D40(newPlayerStateAddr + 54312, v19, v17);
    }
    else
    {
      *v19 = *v17;
      *(v19 + 16) = *(v17 + 16);
      *(newPlayerStateAddr + 54320) += 24i64;
    }
    v17 += 24i64;
    --v18;
  }
  while ( v18 );
  v20 = oldPlayerStateAddr2 + 47512;
  v21 = 0;
  v22 = 0i64;
  v23 = 0i64;
  v366 = 0i64;
  v24 = (oldPlayerStateAddr2 + 47512);
  v25 = 11i64;
  do
  {
    v26 = v16[1];
    if ( v23 >= (v26 - *v16) / 24 )
    {
      v27 = v20 + v22;
      if ( v16[2] != v26 )
      {
        *v26 = *v27;
        *(v26 + 16) = *(v27 + 16);
        v16[1] += 24i64;
        goto LABEL_36;
      }
      sub_1407A2D40(v16, v16[1], v27);
    }
    else
    {
      v475 = 0i64;
      v476 = 0i64;
      if ( !sub_1408DC940(v24, &v475) )
        physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
          (v24 + *v16 - (oldPlayerStateAddr2 + 47512)),
          v24);
    }
    v20 = oldPlayerStateAddr2 + 47512;
LABEL_36:
    v23 = ++v366;
    v24 = (v24 + 24);
    v22 += 24i64;
    --v25;
  }
  while ( v25 );
  v28 = *v16;
  newPlayerStateAddr2 = newPlayerStateAddr1;
  if ( *v16 != *(newPlayerStateAddr1 + 6790) )
  {
    v30 = (v28 + 24);
    v371 = (v28 + 24);
    do
    {
      v473 = 0i64;
      v474 = 0i64;
      if ( sub_1408DC940(v28, &v473) )
      {
        v31 = *(newPlayerStateAddr2 + 6790);
        v32 = v30;
        if ( v30 != v31 )
        {
          do
          {
            physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues((v32 + v28 - v371), v32);
            v32 = (v32 + 24);
          }
          while ( v32 != v31 );
          v31 = *(newPlayerStateAddr2 + 6790);
          v30 = v371;
        }
        v33 = v31 - 24;
        *(newPlayerStateAddr2 + 6790) = v31 - 24;
      }
      else
      {
        v28 += 24i64;
        v30 = (v30 + 24);
        v371 = v30;
        v33 = *(newPlayerStateAddr2 + 6790);
      }
    }
    while ( v28 != v33 );
    v16 = (newPlayerStateAddr2 + 54312);
  }
  v34 = 0;
  v372 = 0;
  if ( *(oldPlayerStateAddr2 + 47784) > 0 )
  {
    v367 = 0i64;
    do
    {
      v35 = v16[1];
      v36 = *v16;
      v37 = v34;
      if ( *v16 != v35 )
      {
        do
        {
          sub_1408DC940(*(oldPlayerStateAddr2 + 47776) + 24 * v37, v36);
          v36 += 24i64;
        }
        while ( v36 != v35 );
        v16 = (newPlayerStateAddr2 + 54312);
      }
      v38 = *(oldPlayerStateAddr2 + 47776) + 24 * v37;
      v471 = 0i64;
      v472 = 0i64;
      if ( !sub_1408DC940(v38, &v471) )
      {
        v39 = *(oldPlayerStateAddr2 + 47776) + v367;
        v40 = v16[1];
        if ( v16[2] == v40 )
        {
          sub_1407A2D40(v16, v40, v39);
        }
        else
        {
          *v40 = *v39;
          *(v40 + 16) = *(v39 + 16);
          v16[1] += 24i64;
        }
      }
      v34 = v372 + 1;
      v372 = v34;
      v367 += 24i64;
    }
    while ( v34 < *(oldPlayerStateAddr2 + 47784) );
  }
  newPlayerStateAddr2[54376] = *(oldPlayerStateAddr2 + 47792);
  newPlayerStateAddr2[54377] = *(oldPlayerStateAddr2 + 47793);
  *(sub_14031E140(&unk_1437E2980) + 2474884) = 0;
  v41 = 0;
  v42 = (oldPlayerStateAddr2 + 48464);
  do
  {
    if ( *v42 )
    {
      v43 = sub_14031E140(&unk_1437E2980);
      *(v43 + 4 * (v41 >> 6) + 2474884) |= 1 << (v41 & 0x3F);
    }
    ++v41;
    ++v42;
  }
  while ( v41 < 4 );
  v44 = *(newPlayerStateAddr2 + 198);
  v45 = *(newPlayerStateAddr2 + 196);
  v386[0] = *(newPlayerStateAddr2 + 194);
  v386[1] = v44;
  v386[2] = v45;
  v387 = 1;
  sub_141A6D180(v386);
  sub_14058B1F0(newPlayerStateAddr2 + 504, oldPlayerStateAddr2 + 41048);
  v46 = newPlayerStateAddr2 + 42440;
  v47 = oldPlayerStateAddr2 + 326112;
  v413 = 9i64;
  v48 = 9i64;
  do
  {
    sub_141FC9150(v46, v47);
    v47 += 1824i64;
    v46 += 680;
    --v48;
  }
  while ( v48 );
  if ( !*(oldPlayerStateAddr2 + 342500) )
  {
    v49 = oldPlayerStateAddr2 + 40368;
    v50 = -1i64;
    do
      ++v50;
    while ( *(v49 + v50) );
    if ( v50 <= 0 )
    {
      if ( &byte_1437C2560 != newPlayerStateAddr2 + 42440 )
      {
        v51 = 0;
        v52 = 0i64;
        while ( *(v52 + 0x1437C2560i64) )
        {
          if ( !*(v52 + 0x1437C2561i64) )
          {
            v51 += 2;
            goto LABEL_79;
          }
          if ( !*(v52 + 0x1437C2562i64) )
          {
            v51 += 3;
            goto LABEL_79;
          }
          v51 += 4;
          if ( *(v52 + 0x1437C2563i64) )
          {
            v52 += 4i64;
            if ( v52 < 128 )
              continue;
          }
          goto LABEL_79;
        }
        ++v51;
LABEL_79:
        memmove(newPlayerStateAddr2 + 42440, &byte_1437C2560, v51);
        newPlayerStateAddr2[42567] = 0;
      }
      *(newPlayerStateAddr2 + 2661) = xmmword_1437C25E0;
    }
    else
    {
      sub_141FC9150(newPlayerStateAddr2 + 42440, v49);
    }
  }
  v53 = newPlayerStateAddr2 + 324016;
  v54 = oldPlayerStateAddr2 + 344600;
  v55 = 3i64;
  do
  {
    v458 = 0i64;
    v459 = 0;
    sub_141733EB0(v53, v54, 0, 0, &v458);
    v53 += 13232;
    v54 += 72;
    --v55;
  }
  while ( v55 );
  v56 = 0;
  while ( 2 )
  {
    v57 = 0;
    v58 = 0i64;
    v59 = 0;
    GetPlayerStateAddr(&unk_1437E2980);
    switch ( v56 )
    {
      case 3:
        v60 = *(newPlayerStateAddr2 + 2661);
        v57 = *(oldPlayerStateAddr2 + 344584);
        goto LABEL_93;
      case 4:
        v60 = *(newPlayerStateAddr2 + 43256);
        v57 = *(oldPlayerStateAddr2 + 344585);
        goto LABEL_93;
      case 5:
        v60 = *(newPlayerStateAddr2 + 2746);
        v57 = *(oldPlayerStateAddr2 + 344586);
        goto LABEL_93;
      case 6:
        v60 = *(newPlayerStateAddr2 + 44616);
        v57 = *(oldPlayerStateAddr2 + 344587);
        goto LABEL_93;
      case 7:
        v60 = *(newPlayerStateAddr2 + 2831);
        v57 = *(oldPlayerStateAddr2 + 344588);
        goto LABEL_93;
      case 8:
        v60 = *(newPlayerStateAddr2 + 45976);
        v57 = *(oldPlayerStateAddr2 + 344589);
        goto LABEL_93;
      default:
        if ( v56 != 2 )
          goto LABEL_94;
        v60 = *(newPlayerStateAddr2 + 632);
        v57 = 1;
LABEL_93:
        v375 = v60;
        v58 = v60;
        v59 = BYTE8(v60);
LABEL_94:
        v456 = v58;
        v457 = v59;
        sub_1417342F0(
          newPlayerStateAddr2 + 59376 + 13232 * v56,
          oldPlayerStateAddr2 + 342824 + 88 * v56,
          v56,
          &v456,
          v57);
        if ( ++v56 < 20 )
          continue;
        *(newPlayerStateAddr2 + 22740) = *(oldPlayerStateAddr2 + 344816);
        *(newPlayerStateAddr2 + 22741) = *(oldPlayerStateAddr2 + 344832);
        v61 = newPlayerStateAddr2 + 648;
        if ( dword_1437E29C4 && dword_1437E29C4 != 6 || (v62 = *(sub_14031E080(&unk_1437E2980) + 1216), v62 <= 0) )
          v62 = *(*sub_14031DF40(&unk_1437E2980) + 88640i64);
        sub_1407D5010(newPlayerStateAddr2 + 648, v62);
        v63 = *(oldPlayerStateAddr2 + 424);
        v64 = &v63[2 * *(oldPlayerStateAddr2 + 432)];
        if ( v63 == v64 )
          goto LABEL_109;
        break;
    }
    break;
  }
  while ( 2 )
  {
    v65 = *v63;
    if ( *v63 < 0
      || v65 >= *(newPlayerStateAddr2 + 388)
      || (v66 = v63[1], v66 < 0)
      || v66 >= *(newPlayerStateAddr2 + 389) )
    {
      LODWORD(v66) = v63[1];
      goto LABEL_107;
    }
    if ( ((1i64 << (v65 - (v65 & 0xC0u))) & *&v61[8 * v66 + 8 * (v65 / 64)]) == 0 )
LABEL_107:
      *&v61[8 * v66 + 8 * (v65 / 64)] |= 1i64 << (v65 - (v65 & 0xC0u));
    v63 += 2;
    if ( v63 != v64 )
      continue;
    break;
  }
LABEL_109:
  v416 = 0i64;
  v417 = 0i64;
  oldInventorAdr = *(oldPlayerStateAddr2 + 408);
  v68 = &oldInventorAdr[3 * *(oldPlayerStateAddr2 + 416)];
  if ( oldInventorAdr != v68 )
  {
    v69 = oldInventorAdr + 8;
    while ( 2 )
    {
      oldInventorAdr2 = *oldInventorAdr;
      v420 = oldInventorAdr[1];
      v421 = oldInventorAdr[2];
      PossiblePlayerCopyInventory(newPlayerStateAddr2, &oldInventorAdr2, (newPlayerStateAddr2 + 648));
      v398 = 4;
      if ( !sub_140834C70(newPlayerStateAddr2, &oldInventorAdr2, &v398)
        || !sub_1407F4900(newPlayerStateAddr2, &oldInventorAdr2) )
      {
        goto LABEL_134;
      }
      if ( *oldInventorAdr == 1 )
      {
        v70 = sub_14031DF40(&unk_1437E2980);
        v71 = sub_141378FB0(v70, v69);
        if ( v71 || (v72 = sub_14031DF40(&unk_1437E2980), (v71 = sub_14134C300(v72, v69, 0i64)) != 0) )
        {
          if ( *(v71 + 618) )
          {
            v73 = v416;
            if ( v416 != *(&v416 + 1) )
            {
              while ( v73[1] != *(v71 + 8) || *v73 != *v71 )
              {
                v73 += 2;
                if ( v73 == *(&v416 + 1) )
                  goto LABEL_121;
              }
              v74 = 1;
              goto LABEL_126;
            }
LABEL_121:
            if ( v417 == *(&v416 + 1) )
            {
              sub_140387810(&v416, *(&v416 + 1), v71);
            }
            else
            {
              **(&v416 + 1) = *v71;
              *(&v416 + 1) += 16i64;
            }
          }
          v74 = 0;
LABEL_126:
          v75 = *(v71 + 568);
          if ( v75 > 0 )
          {
            v76 = HIDWORD(v420);
            if ( v75 != HIDWORD(v420) )
              v76 = *(v71 + 568);
            HIDWORD(v420) = v76;
          }
          if ( v74 )
            goto LABEL_134;
        }
      }
      sub_1407B53B0(newPlayerStateAddr2 + 648, &v385, &oldInventorAdr2);
      v77 = *(newPlayerStateAddr2 + 6765);
      if ( *(newPlayerStateAddr2 + 6766) == v77 )
      {
        sub_14070F330(newPlayerStateAddr2 + 54112, v77, &oldInventorAdr2);
      }
      else
      {
        *v77 = oldInventorAdr2;
        v77[1] = v420;
        v77[2] = v421;
        *(newPlayerStateAddr2 + 6765) += 48i64;
      }
LABEL_134:
      oldInventorAdr += 3;
      v69 += 48;
      if ( oldInventorAdr == v68 )
      {
        oldPlayerStateAddr2 = oldPlayerStateAddr1;
        break;
      }
      continue;
    }
  }
  *(newPlayerStateAddr2 + 102) = *(newPlayerStateAddr2 + 101);
  v78 = sub_14031DF40(&unk_1437E2980);
  v79 = *v78;
  v428 = *(*v78 + 88672i64);
  v429 = *(v79 + 88680);
  v430 = *(v79 + 88688);
  v431 = *(v79 + 88696);
  v80 = sub_14031DF40(&unk_1437E2980);
  v81 = *v80;
  v432 = *(*v80 + 88704i64);
  v433 = *(v81 + 88712);
  v434 = *(v81 + 88720);
  v435 = *(v81 + 88728);
  if ( !dword_1437E29C4 || dword_1437E29C4 == 6 )
  {
    v428 = *(sub_14031E080(&unk_1437E2980) + 1220);
    v432 = *(sub_14031E080(&unk_1437E2980) + 1224);
  }
  sub_14071C1D0(v555, oldPlayerStateAddr2 + 752);
  v556 = *(GetPlayerStateAddr(&unk_1437E2980) + 4172784);
  v557 = *(GetPlayerStateAddr(&unk_1437E2980) + 4172788);
  if ( v558 )
  {
    if ( v558 == 1 )
      sub_1407F9260(newPlayerStateAddr2 + 1248, v555, 1i64);
  }
  else
  {
    sub_1407D5FA0(newPlayerStateAddr2 + 1248, 1, v428, &v429, v431, 4, 0, 2);
  }
  v401 = 4;
  sub_1407B6050(newPlayerStateAddr2, newPlayerStateAddr2 + 1248, v555, &v401);
  if ( newPlayerStateAddr2 != -1248i64 )
    sub_1407C06C0(newPlayerStateAddr2 + 1248, v400 + 752);
  sub_14071C1D0(v551, oldPlayerStateAddr2 + 1096);
  v552 = *(GetPlayerStateAddr(&unk_1437E2980) + 4172792);
  v553 = *(GetPlayerStateAddr(&unk_1437E2980) + 4172796);
  if ( v554 )
  {
    if ( v554 == 1 )
      sub_1407F9260(newPlayerStateAddr2 + 1848, v551, 2i64);
  }
  else
  {
    sub_1407D5FA0(newPlayerStateAddr2 + 1848, 2, v432, &v433, v435, 4, 0, 2);
  }
  v402 = 4;
  sub_1407B6050(newPlayerStateAddr2, newPlayerStateAddr2 + 1848, v551, &v402);
  v82 = 0;
  v83 = oldPlayerStateAddr2 + 2128;
  do
  {
    v84 = GetPlayerStateAddr(&unk_1437E2980);
    sub_140788A40(v84 + 1518192, v82++, v83);
    v83 += 1120i64;
  }
  while ( v82 < 6 );
  if ( *(oldPlayerStateAddr2 + 8848) >= 0 )
  {
    v85 = GetPlayerStateAddr(&unk_1437E2980);
    if ( *(oldPlayerStateAddr2 + 8848) < sub_1407808E0(v85 + 1518192) )
    {
      v90 = GetPlayerStateAddr(&unk_1437E2980);
      sub_14078DDA0(v90 + 1518192, *(oldPlayerStateAddr2 + 8848));
    }
    else
    {
      v523 = 0i64;
      v524 = 0;
      sub_1409845E0(v522);
      v385 = &v525;
      v525 = 0i64;
      v526 = 0;
      v527 = 0;
      v528 = 0i64;
      v529 = 0;
      v530 = 0;
      v531 = 0i64;
      v532 = 0i64;
      v533 = 0;
      v534 = 0;
      v535 = 0i64;
      v536 = 0;
      v537 = 0;
      v538 = 0;
      sub_1409844D0(&v525);
      *&v539 = 0i64;
      BYTE8(v539) = 0;
      v540 = 0;
      v385 = v541;
      v541[0] = 0;
      v542 = 0;
      AK::MemoryMgr::StartProfileThreadUsage(&v542);
      v543 = 0i64;
      v544 = 0;
      v545 = 0;
      v403 = &v546;
      v546 = 0i64;
      v547 = 0;
      v548 = 0;
      AK::MemoryMgr::StartProfileThreadUsage(&v546);
      sub_141FCE230(v541);
      sub_1409848B0(v522);
      *&v375 = *(newPlayerStateAddr2 + 10730);
      BYTE8(v375) = newPlayerStateAddr2[85848];
      v539 = v375;
      sub_1408CA760(&v525, oldPlayerStateAddr2 + 1784);
      sub_1408CAA80(v522, oldPlayerStateAddr2 + 40336);
      v86 = GetPlayerStateAddr(&unk_1437E2980);
      v87 = sub_1407808E0(v86 + 1518192);
      v88 = GetPlayerStateAddr(&unk_1437E2980);
      sub_140788A40(v88 + 1518192, v87, v522);
      v89 = GetPlayerStateAddr(&unk_1437E2980);
      sub_14078DDA0(v89 + 1518192, v87);
      sub_14071E7C0(v522);
    }
  }
  else
  {
    sub_14081E200(newPlayerStateAddr2, 3, 4, oldPlayerStateAddr2 + 40336, oldPlayerStateAddr2 + 1784, 1, 0, 2);
  }
  v91 = GetPlayerStateAddr(&unk_1437E2980);
  sub_14077F730(v91 + 501264, 0i64);
  v92 = 0;
  v93 = 0i64;
  v368 = oldPlayerStateAddr2 + 15520;
  v94 = oldPlayerStateAddr2 + 35104;
  do
  {
    v95 = 1;
    if ( v92 >= dword_1437C716C )
      v95 = *(v93 + oldPlayerStateAddr2 + 39856);
    v96 = GetPlayerStateAddr(&unk_1437E2980);
    sub_14078DCF0(v96 + 501264, v92, v95);
    v97 = GetPlayerStateAddr(&unk_1437E2980);
    sub_140788970(v97 + 501264, v92, v368, 0i64);
    v98 = GetPlayerStateAddr(&unk_1437E2980);
    sub_1407889B0(v98 + 501264, v92++, v94);
    v368 += 544i64;
    v94 += 264i64;
    ++v93;
  }
  while ( v92 < 18 );
  v99 = 0;
  v100 = oldPlayerStateAddr2 + 25312;
  do
  {
    v101 = GetPlayerStateAddr(&unk_1437E2980);
    LOBYTE(v102) = 1;
    sub_140788970(v101 + 501264, v99++, v100, v102);
    v100 += 544i64;
  }
  while ( v99 < 18 );
  v103 = GetPlayerStateAddr(&unk_1437E2980);
  sub_1407888A0(v103 + 1609648, oldPlayerStateAddr2);
  sub_1403B2540(&unk_143C7A340, oldPlayerStateAddr2 + 8856);
  v104 = sub_14031DF40(&unk_1437E2980);
  v105 = *v104;
  v442 = *(*v104 + 88768i64);
  v443 = *(v105 + 88776);
  v444 = *(v105 + 88784);
  v445 = *(v105 + 88792);
  v106 = sub_14031DF40(&unk_1437E2980);
  v107 = *v106;
  v480 = *(*v106 + 88800i64);
  v481 = *(v107 + 88808);
  v482 = *(v107 + 88816);
  v483 = *(v107 + 88824);
  v403 = 7i64;
  sub_14081E200(newPlayerStateAddr2, 7, 24, oldPlayerStateAddr2 + 49208, oldPlayerStateAddr2 + 49272, 6, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 8, 24, &v442, oldPlayerStateAddr2 + 49616, 6, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 9, 24, oldPlayerStateAddr2 + 49240, oldPlayerStateAddr2 + 49960, 5, 0, 2);
  if ( sub_1407805D0(newPlayerStateAddr2 + 5448) == 4 )
  {
    sub_1407B0BB0(v559);
    sub_1407D57C0(
      v559,
      8,
      oldPlayerStateAddr2 + 49216,
      *(oldPlayerStateAddr2 + 49232),
      25,
      0,
      1,
      0,
      *(oldPlayerStateAddr2 + 49304),
      0i64);
    v561 = v560;
    sub_1402ED040(v563);
    std::_Hash<std::_Umap_traits<std::wstring,std::wstring,std::_Uhash_compare<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>>,std::allocator<std::pair<std::wstring const,std::wstring>>,0>>::_Init(
      v562,
      8ui64);
    v108 = sub_1407805D0(newPlayerStateAddr2 + 5448);
    if ( sub_1407805D0(v559) > v108 )
    {
      sub_1407B2F70(newPlayerStateAddr2 + 5448, v559);
      v399 = 64;
      sub_1407B6050(newPlayerStateAddr2, newPlayerStateAddr2 + 5448, oldPlayerStateAddr2 + 49616, &v399);
    }
    sub_14030EBD0(v559);
  }
  sub_1407C07E0(newPlayerStateAddr2 + 4848, 7, oldPlayerStateAddr2 + 48664, *(newPlayerStateAddr2 + 1280), 0, 5);
  sub_1407C07E0(newPlayerStateAddr2 + 5448, 7, oldPlayerStateAddr2 + 48664, *(newPlayerStateAddr2 + 1430), 0, 5);
  sub_1407C07E0(newPlayerStateAddr2 + 6048, 7, oldPlayerStateAddr2 + 48664, *(newPlayerStateAddr2 + 1580), 0, 5);
  if ( newPlayerStateAddr2 != -5448i64 )
  {
    v454 = *(oldPlayerStateAddr2 + 48664);
    v455 = *(oldPlayerStateAddr2 + 48672);
    sub_1407C04A0(newPlayerStateAddr2 + 5448, 8i64, &v454);
  }
  v405 = 8193;
  v404 = 12288;
  v109 = (oldPlayerStateAddr2 + 326832);
  v369 = oldPlayerStateAddr2 + 326832;
  v110 = oldPlayerStateAddr2 + 327136;
  v373 = oldPlayerStateAddr2 + 327136;
  v111 = -326080i64;
  v388 = -326080i64;
  v384 = 9i64;
  v112 = newPlayerStateAddr2 + 31640;
  do
  {
    v113 = 0;
    v114 = *v109;
    v115 = *v109 + 24i64 * *(v109 + v111 + 326088);
    if ( *v109 != v115 )
    {
      do
      {
        v452 = *v114;
        v453 = *(v114 + 16);
        v410 = 0ui64;
        v484 = 15i64;
        v485 = 11i64;
        for ( i = 0i64; i < 0xB; ++i )
        {
          v117 = *(i + 0x142A88E18i64);
          *(&v410 + i) = v117;
          if ( (v117 - 97) <= 0x19u )
            *(&v410 + i) = v117 - 32;
        }
        if ( i < 0x10 )
          memset(&v410 + i, 0, 16 - i);
        if ( v452 == v410 && *&v453 > 0.0 )
          v113 = 1;
        v114 += 24i64;
      }
      while ( v114 != v115 );
      newPlayerStateAddr2 = newPlayerStateAddr1;
      v110 = v373;
    }
    v118 = v110 - 344;
    sub_1407F9260(v112 - 5424, v110 - 344, 4i64);
    v119 = &v404;
    if ( !v113 )
      v119 = &v405;
    v389 = *v119;
    sub_1407B6050(newPlayerStateAddr2, v112 - 5424, v118, &v389);
    sub_1407F9260(v112, v373, 6i64);
    v390 = *v119;
    sub_1407B6050(newPlayerStateAddr2, v112, v373, &v390);
    sub_1407F9260(v112 + 5400, v373 + 344, 5i64);
    v391 = *v119;
    sub_1407B6050(newPlayerStateAddr2, v112 + 5400, v373 + 344, &v391);
    v112 += 600;
    v373 += 1824i64;
    v109 = (v369 + 1824);
    v369 += 1824i64;
    v120 = v384-- == 1;
    v110 = v373;
    v111 = v388;
  }
  while ( !v120 );
  oldPlayerStateAddr3 = oldPlayerStateAddr1;
  if ( newPlayerStateAddr2[54304] )
  {
    v122 = *(oldPlayerStateAddr1 + 39880);
    v123 = &v122[3 * *(oldPlayerStateAddr1 + 39888)];
    if ( v122 != v123 )
    {
      do
      {
        if ( sub_1407F4900(newPlayerStateAddr2, v122) )
        {
          v477 = *v122;
          v478 = v122[1];
          v479 = v122[2];
          if ( newPlayerStateAddr2[54305] )
            v124 = sub_1407E3090(newPlayerStateAddr2, 4i64, 0xFFFFFFFFi64);
          else
            v124 = (newPlayerStateAddr2 + 648);
          PossiblePlayerCopyInventory(newPlayerStateAddr2, &v477, v124);
          v125 = *(newPlayerStateAddr2 + 6774);
          if ( *(newPlayerStateAddr2 + 6775) == v125 )
          {
            sub_14070F330(newPlayerStateAddr2 + 54184, v125, &v477);
          }
          else
          {
            *v125 = v477;
            v125[1] = v478;
            v125[2] = v479;
            *(newPlayerStateAddr2 + 6774) += 48i64;
          }
        }
        v122 += 3;
      }
      while ( v122 != v123 );
      oldPlayerStateAddr3 = oldPlayerStateAddr1;
    }
  }
  v486 = *(oldPlayerStateAddr3 + 345168) + 424i64 * *(oldPlayerStateAddr3 + 345176);
  v487 = *(oldPlayerStateAddr3 + 345168);
  v422 = v486;
  v423 = v487;
  sub_14079F0B0(newPlayerStateAddr2 + 48568, &v423, &v422, 0i64);
  *(newPlayerStateAddr2 + 12140) = *(oldPlayerStateAddr3 + 342496);
  if ( !*(oldPlayerStateAddr3 + 342500) )
  {
    v465 = 0i64;
    v466 = 0;
    sub_1409845E0(v464);
    if ( v365 )
    {
      v126 = (*sub_14031DF40(&unk_1437E2980) + 88736i64);
      v127 = v464;
      goto LABEL_204;
    }
    sub_1408CAA80(v464, oldPlayerStateAddr3 + 40304);
    if ( (!dword_1437E29C4 || dword_1437E29C4 == 6) && *(sub_14031E080(&unk_1437E2980) + 1488) > 0 )
    {
      v128 = sub_14031E080(&unk_1437E2980);
      v446 = *(v128 + 1488);
      v447 = *(v128 + 1496);
      v448 = *(v128 + 1504);
      v449 = *(v128 + 1512);
      if ( !v448 )
      {
        v447 = sub_1407D8B50(v128);
        v448 = 1;
      }
      v126 = &v446;
      v127 = &v442;
LABEL_204:
      sub_1408CAA80(v127, v126);
    }
    sub_14081E200(newPlayerStateAddr2, 4, 4, v464, oldPlayerStateAddr3 + 1440, 0, 0, 2);
    sub_14081E200(newPlayerStateAddr2, 6, 4, &v480, oldPlayerStateAddr3 + 327136, 0, 0, 2);
    sub_14081E200(newPlayerStateAddr2, 5, 4, &v442, oldPlayerStateAddr3 + 327480, 0, 0, 2);
  }
  newPlayerStateAddr3Plus1 = 0;
  LODWORD(newPlayerStateAddr1) = 0;
  v467 = _mm_load_si128(&xmmword_142A89FF0);
  v468 = 27;
  v469 = 28;
  v470 = 28;
  v130 = 0i64;
  v388 = (newPlayerStateAddr2 + 25888);
  v131 = oldPlayerStateAddr3 + 315072;
  v374 = oldPlayerStateAddr3 + 315072;
  v132 = &v467;
  v384 = &v467;
  do
  {
    v385 = newPlayerStateAddr3Plus1;
    v133 = 600i64 * newPlayerStateAddr3Plus1;
    v370 = v133;
    v134 = v132->m128i_i32[0];
    v460 = 10i64;
    v461 = 1;
    sub_1407D5EC0(&newPlayerStateAddr2[v133 + 17472], 10i64, &v460, v134);
    v462 = 10i64;
    v463 = 1;
    sub_1407D5EC0(&newPlayerStateAddr2[v133 + 21672], 11i64, &v462, v134);
    if ( !*(v131 - 724) )
    {
      v135 = sub_14031DF40(&unk_1437E2980);
      v136 = *v135;
      v137 = 0;
      if ( *(v130 + *v135 + 6248) > 0 )
      {
        do
        {
          v138 = sub_14031DF40(&unk_1437E2980);
          v139 = sub_141378FB0(v138, *(v130 + v136 + 6240) + 16i64 * v137);
          if ( v139 )
          {
            v437 = 0;
            v441 = -1i64;
            sub_140984590(&v437);
            v439 = -1;
            v440 = *(v139 + 568);
            v438 = *v139;
            v437 = 1;
            if ( *(v139 + 564) )
            {
              if ( *(v139 + 596) )
                v439 = *(v139 + 568);
              else
                v439 = 0;
            }
            sub_1407B53B0(&newPlayerStateAddr2[v370 + 21672], &v375, &v437);
          }
          ++v137;
        }
        while ( v137 < *(v130 + v136 + 6248) );
        oldPlayerStateAddr3 = oldPlayerStateAddr1;
      }
      v133 = v370;
    }
    if ( newPlayerStateAddr1 == 5 )
    {
      v140 = 2560;
    }
    else
    {
      v140 = 2304;
      if ( newPlayerStateAddr1 == 6 )
        v140 = 3072;
    }
    v392 = v140;
    v141 = 1824i64 * v385;
    sub_1407B6050(
      newPlayerStateAddr2,
      &newPlayerStateAddr2[v133 + 17472],
      oldPlayerStateAddr3 + 1824i64 * v385 + 314008,
      &v392);
    v393 = v140;
    sub_1407B6050(newPlayerStateAddr2, &newPlayerStateAddr2[v133 + 21672], oldPlayerStateAddr3 + v141 + 314696, &v393);
    sub_1407C06C0(&newPlayerStateAddr2[v133 + 21672], &v400[v141 + 314696]);
    v142 = v388;
    *(v388 - 16) = *v374;
    *v142 = *(v374 + 16);
    v142[1] = *(v374 + 32);
    newPlayerStateAddr3Plus1 = newPlayerStateAddr1 + 1;
    LODWORD(newPlayerStateAddr1) = newPlayerStateAddr3Plus1;
    v132 = (v384 + 4);
    v384 += 4i64;
    v130 += 16i64;
    v131 = v374 + 1824;
    v374 += 1824i64;
    v388 = (v142 + 3);
  }
  while ( newPlayerStateAddr3Plus1 < 7 );
  v143 = 0;
  if ( *(oldPlayerStateAddr3 + 326064) <= 6u )
    v143 = *(oldPlayerStateAddr3 + 326064);
  *(newPlayerStateAddr2 + 6552) = v143;
  newPlayerStateAddr2[59280] = *(oldPlayerStateAddr3 + 342501);
  sub_14081E200(newPlayerStateAddr2, 12, 30, oldPlayerStateAddr3 + 307344, oldPlayerStateAddr3 + 307376, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 13, 30, oldPlayerStateAddr3 + 307720, oldPlayerStateAddr3 + 307752, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 14, 30, oldPlayerStateAddr3 + 308096, oldPlayerStateAddr3 + 308128, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 15, 30, oldPlayerStateAddr3 + 308472, oldPlayerStateAddr3 + 308504, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 16, 30, oldPlayerStateAddr3 + 308848, oldPlayerStateAddr3 + 308880, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 17, 30, oldPlayerStateAddr3 + 309224, oldPlayerStateAddr3 + 309256, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 18, 30, oldPlayerStateAddr3 + 309600, oldPlayerStateAddr3 + 309632, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 19, 30, oldPlayerStateAddr3 + 309976, oldPlayerStateAddr3 + 310008, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 20, 30, oldPlayerStateAddr3 + 310352, oldPlayerStateAddr3 + 310384, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 21, 30, oldPlayerStateAddr3 + 310728, oldPlayerStateAddr3 + 310760, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 22, 33, oldPlayerStateAddr3 + 311104, oldPlayerStateAddr3 + 311136, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 23, 33, oldPlayerStateAddr3 + 311480, oldPlayerStateAddr3 + 311512, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 26, 30, oldPlayerStateAddr3 + 311856, oldPlayerStateAddr3 + 311888, 5, 0, 2);
  sub_14081E200(newPlayerStateAddr2, 27, 36, oldPlayerStateAddr3 + 312232, oldPlayerStateAddr3 + 312264, 5, 0, 2);
  v144 = sub_1407E3090(newPlayerStateAddr2, 4i64, 0xFFFFFFFFi64);
  sub_140834020(v144, 4i64);
  v145 = sub_1407E3090(newPlayerStateAddr2, 5i64, 0xFFFFFFFFi64);
  sub_140834020(v145, 5i64);
  sub_140834020(newPlayerStateAddr2 + 2448, 3i64);
  sub_140834020(newPlayerStateAddr2 + 1248, 1i64);
  v146 = 8i64;
  v147 = sub_1407E3090(newPlayerStateAddr2, 8i64, 0xFFFFFFFFi64);
  sub_140834020(v147, 8i64);
  v148 = v365;
  if ( v365 )
  {
    for ( j = 0; j < 28; ++j )
    {
      v150 = GetPlayerStateAddr(&unk_1437E2980);
      newPlayerStateAddr4 = sub_140735FB0(v150 + 1636024, j);
      LODWORD(newPlayerStateAddr1) = newPlayerStateAddr4;
      if ( newPlayerStateAddr4 > 0 )
      {
        v152 = sub_1407E3090(newPlayerStateAddr2, j, 0xFFFFFFFFi64);
        v154 = v152;
        if ( v152 )
        {
          v155 = 0;
          v156 = *(v152 + 130);
          v157 = *(v152 + 128);
          v158 = 0;
          if ( v156 * v157 > 0 )
          {
            do
            {
              v159 = v158 % v157;
              v153 = v158 / v157;
              if ( v158 % v157 < 0 || v159 >= v157 || v158 / v157 < 0 || v153 >= v156 )
              {
                v161 = 0;
              }
              else
              {
                v160 = *(v154 + 8 * (v153 + v159 / 64));
                v161 = _bittest64(&v160, v159 - (v159 & 0xFFFFFFFFFFFFFFC0ui64));
              }
              v162 = v155 + 1;
              if ( !v161 )
                v162 = v155;
              v155 = v162;
              ++v158;
            }
            while ( v158 < v156 * v157 );
            newPlayerStateAddr4 = newPlayerStateAddr1;
          }
          v163 = newPlayerStateAddr4 - v155;
          if ( v163 > 0 )
          {
            v164 = 9;
            if ( (j - 4) <= 2 )
            {
              v164 = 2;
            }
            else if ( (j - 7) <= 2 )
            {
              v164 = 5;
            }
            LOBYTE(v153) = 1;
            sub_1407B6AD0(v154, j, v163, v153, v164);
          }
        }
      }
    }
    LODWORD(newPlayerStateAddr1) = 0;
    sub_1407C3B50(&newPlayerStateAddr1);
    v165 = GetPlayerStateAddr(&unk_1437E2980);
    v166 = sub_140735880(v165 + 1636024);
    newPlayerStateAddr5 = newPlayerStateAddr1;
    newPlayerStateAddr6 = newPlayerStateAddr1;
    v168 = sub_1407E3090(newPlayerStateAddr2, 5i64, 0xFFFFFFFFi64);
    sub_1407B6050(newPlayerStateAddr2, v168, v166, &newPlayerStateAddr6);
    v169 = GetPlayerStateAddr(&unk_1437E2980);
    v170 = sub_1407358A0(v169 + 1636024);
    newPlayerStateAddr7 = newPlayerStateAddr5;
    v171 = sub_1407E3090(newPlayerStateAddr2, 3i64, 0xFFFFFFFFi64);
    sub_1407B6050(newPlayerStateAddr2, v171, v170, &newPlayerStateAddr7);
    oldPlayerStateAddr3 = oldPlayerStateAddr1;
    v146 = 8i64;
    v148 = v365;
  }
  v172 = *(oldPlayerStateAddr3 + 55920);
  if ( v172 > 0 )
  {
    v488 = *(oldPlayerStateAddr3 + 55920);
    v173 = *(newPlayerStateAddr2 + 6084);
    if ( v172 >= v173 )
      v173 = v172;
    while ( 1 )
    {
      if ( v146 > 0x28F5C28F5C28F5Ci64 )
      {
        *(&v174 + 1) = (v146 * 0x47AE147AE147AE15ui64) >> 64;
        v175 = 80 * (v146 / 0x64);
      }
      else
      {
        v174 = 80 * v146 * 0x47AE147AE147AE15ui64;
        v175 = 80 * v146 / 0x64;
      }
      if ( v175 >= v173 )
        break;
      if ( !v146 )
        goto LABEL_560;
      v146 *= 2i64;
    }
    if ( !v146 )
LABEL_560:
      Concurrency::target_block<Concurrency::multi_link_registry<Concurrency::ISource<int>>,Concurrency::ordered_message_processor<int>>::process_input_messages(
        (newPlayerStateAddr2 + 48640),
        *(&v174 + 1));
    if ( v146 > *(newPlayerStateAddr2 + 6085) + 1i64 )
      sub_14046A590(newPlayerStateAddr2 + 48640, v146, 0i64);
    v176 = *(oldPlayerStateAddr3 + 55912);
    for ( k = &v176[*(oldPlayerStateAddr3 + 55920)]; v176 != k; ++v176 )
    {
      v436 = *v176;
      sub_14045A190(newPlayerStateAddr2 + 48640, &v375, &v436);
      v178 = DWORD2(v375);
      if ( !DWORD2(v375) )
        Concurrency::target_block<Concurrency::multi_link_registry<Concurrency::ISource<int>>,Concurrency::ordered_message_processor<int>>::process_input_messages(
          (newPlayerStateAddr2 + 48640),
          0i64);
      if ( DWORD2(v375) != 1 )
      {
        if ( DWORD2(v375) == 2 )
        {
          *(*(newPlayerStateAddr2 + 6082) + 16 * v375) = v436;
        }
        else if ( DWORD2(v375) == 3 )
        {
          *(*(newPlayerStateAddr2 + 6082) + 16 * v375) = v436;
        }
      }
      v379 = v178 != 1;
    }
  }
  v179 = *(oldPlayerStateAddr3 + 41192);
  v180 = &v179[*(oldPlayerStateAddr3 + 41200)];
  if ( v179 != v180 )
  {
    while ( 2 )
    {
      v181 = sub_14031DF40(&unk_1437E2980);
      v182 = sub_141378FB0(v181, v179);
      if ( v182 )
      {
        v183 = *(newPlayerStateAddr2 + 6088);
        v184 = *(newPlayerStateAddr2 + 6089);
        v185 = v184;
        if ( v183 != v184 )
        {
          while ( v182[1] != v183[1] || *v182 != *v183 )
          {
            v183 += 2;
            if ( v183 == v184 )
            {
              v185 = *(newPlayerStateAddr2 + 6089);
              goto LABEL_275;
            }
          }
LABEL_283:
          if ( ++v179 == v180 )
            goto LABEL_284;
          continue;
        }
LABEL_275:
        if ( *(newPlayerStateAddr2 + 6090) != v185 )
        {
          *v184 = *v182;
          *(newPlayerStateAddr2 + 6089) += 16i64;
          goto LABEL_283;
        }
        v186 = newPlayerStateAddr2 + 48704;
      }
      else
      {
        v187 = sub_14031DF40(&unk_1437E2980);
        if ( !sub_14134C300(v187, v179, 0i64) )
          goto LABEL_283;
        v186 = newPlayerStateAddr2 + 48704;
        v184 = *(newPlayerStateAddr2 + 6089);
        if ( *(newPlayerStateAddr2 + 6090) != v184 )
        {
          *v184 = *v179;
          *(newPlayerStateAddr2 + 6089) += 16i64;
          goto LABEL_283;
        }
        v182 = v179;
      }
      break;
    }
    sub_140387810(v186, v184, v182);
    goto LABEL_283;
  }
LABEL_284:
  v188 = *(oldPlayerStateAddr3 + 41208);
  for ( l = &v188[2 * *(oldPlayerStateAddr3 + 41216)]; v188 != l; v188 += 2 )
  {
    v190 = sub_14031DF40(&unk_1437E2980);
    v191 = sub_141378180(v190, v188);
    v192 = v191;
    if ( v191 )
    {
      if ( *(v191 + 36) )
      {
        v193 = *(newPlayerStateAddr2 + 6091);
        v194 = *(newPlayerStateAddr2 + 6092);
        v195 = v194;
        if ( v193 == v194 )
        {
LABEL_292:
          v196 = (v192 + 16);
          if ( *(newPlayerStateAddr2 + 6093) == v195 )
          {
            sub_140387810(newPlayerStateAddr2 + 48728, v194, v196);
          }
          else
          {
            *v194 = *v196;
            *(newPlayerStateAddr2 + 6092) += 16i64;
          }
        }
        else
        {
          while ( *(v192 + 24) != v193[1] || *(v192 + 16) != *v193 )
          {
            v193 += 2;
            if ( v193 == v194 )
            {
              v195 = *(newPlayerStateAddr2 + 6092);
              goto LABEL_292;
            }
          }
        }
      }
      if ( *(v192 + 37) )
        continue;
    }
    if ( !v148
      || dword_1437E29C4 && dword_1437E29C4 != 6
      || (v197 = sub_14031E080(&unk_1437E2980), v198 = *(v197 + 13152), v199 = &v198[2 * *(v197 + 13160)], v198 == v199) )
    {
LABEL_303:
      v200 = sub_14031DF40(&unk_1437E2980);
      v201 = sub_141378620(v200, v188);
      if ( v201 )
      {
        v202 = *(newPlayerStateAddr2 + 6091);
        v203 = *(newPlayerStateAddr2 + 6092);
        v204 = v203;
        if ( v202 == v203 )
        {
LABEL_309:
          if ( *(newPlayerStateAddr2 + 6093) == v204 )
          {
            sub_140387810(newPlayerStateAddr2 + 48728, v203, v201);
          }
          else
          {
            *v203 = *v201;
            *(newPlayerStateAddr2 + 6092) += 16i64;
          }
        }
        else
        {
          while ( *(v201 + 8) != v202[1] || *v201 != *v202 )
          {
            v202 += 2;
            if ( v202 == v203 )
            {
              v204 = *(newPlayerStateAddr2 + 6092);
              goto LABEL_309;
            }
          }
        }
      }
    }
    else
    {
      while ( v198[1] != v188[1] || *v198 != *v188 )
      {
        v198 += 2;
        if ( v198 == v199 )
          goto LABEL_303;
      }
    }
  }
  v205 = *(oldPlayerStateAddr3 + 41224);
  v206 = v205 + 16i64 * *(oldPlayerStateAddr3 + 41232);
LABEL_314:
  while ( v205 != v206 )
  {
    v207 = sub_14031DF40(&unk_1437E2980);
    v208 = sub_141378620(v207, v205);
    v209 = v208;
    if ( v208 && *sub_1408384E0(newPlayerStateAddr2 + 364136, v516, v208) == *(newPlayerStateAddr2 + 45520) )
    {
      v424 = *v209;
      sub_14045A190(newPlayerStateAddr2 + 364136, &v375, &v424);
      v210 = DWORD2(v375);
      if ( !DWORD2(v375) )
        Concurrency::target_block<Concurrency::multi_link_registry<Concurrency::ISource<int>>,Concurrency::ordered_message_processor<int>>::process_input_messages(
          (newPlayerStateAddr2 + 364136),
          0i64);
      if ( DWORD2(v375) != 1 )
      {
        if ( DWORD2(v375) == 2 )
        {
          *(*(newPlayerStateAddr2 + 45519) + 16 * v375) = v424;
        }
        else if ( DWORD2(v375) == 3 )
        {
          *(*(newPlayerStateAddr2 + 45519) + 16 * v375) = v424;
          v380 = v210 != 1;
          v205 += 16i64;
          goto LABEL_314;
        }
      }
      v380 = v210 != 1;
    }
    v205 += 16i64;
  }
  v211 = *(oldPlayerStateAddr3 + 41240);
  for ( m = &v211[4 * *(oldPlayerStateAddr3 + 41248)]; v211 != m; v211 += 4 )
  {
    v213 = *(sub_14031DF40(&unk_1437E2980) + 72);
    v214 = *v213;
    v215 = *v213 + 144i64 * *(v213 + 8);
    if ( v214 != v215 )
    {
      v216 = v211[3];
      while ( 1 )
      {
        if ( v214[3] == v216 )
        {
          v217 = v211[2];
          if ( v214[2] == v217 )
          {
            v218 = v211[1];
            if ( v214[1] == v218 && *v214 == *v211 )
              break;
          }
        }
        v214 += 18;
        if ( v214 == v215 )
          goto LABEL_343;
      }
      v219 = *(newPlayerStateAddr2 + 6094);
      v220 = *(newPlayerStateAddr2 + 6095);
      if ( v219 == v220 )
      {
LABEL_340:
        if ( *(newPlayerStateAddr2 + 6096) == v220 )
        {
          sub_14076DEB0(newPlayerStateAddr2 + 48752, *(newPlayerStateAddr2 + 6095), v211);
        }
        else
        {
          *v220 = *v211;
          v220[1] = *(v211 + 1);
          *(newPlayerStateAddr2 + 6095) += 32i64;
        }
      }
      else
      {
        while ( v216 != v219[3] || v217 != v219[2] || v218 != v219[1] || *v211 != *v219 )
        {
          v219 += 4;
          if ( v219 == v220 )
            goto LABEL_340;
        }
      }
    }
LABEL_343:
    ;
  }
  v221 = sub_14031DF40(&unk_1437E2980);
  v222 = *(*v221 + 88952i64);
  v223 = &v222[2 * *(*v221 + 88960i64)];
  if ( v222 != v223 )
  {
    v224 = (newPlayerStateAddr2 + 48728);
    do
    {
      v450 = *v222;
      v225 = v222[1];
      v451 = v225;
      v226 = *v224;
      v227 = *v224;
      v228 = *(newPlayerStateAddr2 + 6092);
      if ( *v224 != v228 )
      {
        while ( v450 != *v227 )
        {
          if ( ++v227 == v228 )
            goto LABEL_356;
        }
        if ( v226 == v228 )
        {
LABEL_353:
          if ( *(newPlayerStateAddr2 + 6093) == v228 )
          {
            sub_14070FB60(newPlayerStateAddr2 + 48728, v228, &v451, v450);
          }
          else
          {
            *v228 = v225;
            *(newPlayerStateAddr2 + 6092) += 16i64;
          }
        }
        else
        {
          while ( v451 != *v226 )
          {
            if ( ++v226 == v228 )
              goto LABEL_353;
          }
        }
      }
LABEL_356:
      v222 += 2;
    }
    while ( v222 != v223 );
  }
  v229 = *(oldPlayerStateAddr3 + 41272);
  for ( n = v229 + 40i64 * *(oldPlayerStateAddr3 + 41280); v229 != n; v229 += 40i64 )
  {
    v231 = *(newPlayerStateAddr2 + 6098);
    if ( *(newPlayerStateAddr2 + 6099) == v231 )
    {
      sub_14048B1C0(newPlayerStateAddr2 + 48776, v231, v229);
    }
    else
    {
      *v231 = *v229;
      *(v231 + 16) = *(v229 + 16);
      *(v231 + 32) = *(v229 + 32);
      *(newPlayerStateAddr2 + 6098) += 40i64;
    }
  }
  if ( v365 )
  {
    v232 = GetPlayerStateAddr(&unk_1437E2980);
    v233 = sub_140735860(v232 + 1636024);
    sub_1407B7F60(newPlayerStateAddr2, v233);
  }
  sub_14080C130(newPlayerStateAddr2, 0i64);
  sub_14080C130(newPlayerStateAddr2, 1i64);
  sub_14080C130(newPlayerStateAddr2, 2i64);
  v234 = sub_14031E140(&unk_1437E2980);
  v234[619288] = *(oldPlayerStateAddr3 + 41944);
  v234[619289] = *(oldPlayerStateAddr3 + 41948);
  v234[619290] = *(oldPlayerStateAddr3 + 41952);
  v234[619291] = *(oldPlayerStateAddr3 + 41956);
  v234[619292] = *(oldPlayerStateAddr3 + 41960);
  v234[619293] = *(oldPlayerStateAddr3 + 41964);
  v235 = *(oldPlayerStateAddr3 + 47808);
  for ( ii = &v235[16 * *(oldPlayerStateAddr3 + 47816)]; v235 != ii; v235 += 16 )
  {
    v237 = *(newPlayerStateAddr2 + 6817);
    if ( *(newPlayerStateAddr2 + 6818) == v237 )
    {
      sub_1407A29D0(newPlayerStateAddr2 + 54528, v237, v235);
    }
    else
    {
      v238 = v235;
      v239 = 2i64;
      do
      {
        *v237 = *v238;
        v237[1] = v238[1];
        v237[2] = v238[2];
        v237[3] = v238[3];
        v237[4] = v238[4];
        v237[5] = v238[5];
        v237[6] = v238[6];
        v237 += 8;
        *(v237 - 1) = v238[7];
        v238 += 8;
        --v239;
      }
      while ( v239 );
      *(newPlayerStateAddr2 + 6817) += 256i64;
    }
  }
  v240 = sub_14031E140(&unk_1437E2980);
  sub_14081B9D0(v240 + 2464656, 0i64, *(oldPlayerStateAddr3 + 41968));
  v241 = sub_14031E140(&unk_1437E2980);
  sub_14081B9D0(v241 + 2464656, 1i64, *(oldPlayerStateAddr3 + 41972));
  v242 = sub_14031E140(&unk_1437E2980);
  sub_14081B9D0(v242 + 2464656, 2i64, *(oldPlayerStateAddr3 + 41976));
  v243 = GetPlayerStateAddr(&unk_1437E2980);
  sub_140987F50(v243 + 1619616, oldPlayerStateAddr3 + 41600);
  v244 = GetPlayerStateAddr(&unk_1437E2980);
  sub_140988210(v244 + 1619984, oldPlayerStateAddr3 + 41616);
  v245 = GetPlayerStateAddr(&unk_1437E2980);
  sub_1407F2570(
    v245 + 1638864,
    oldPlayerStateAddr3 + 41632,
    oldPlayerStateAddr3 + 307312,
    oldPlayerStateAddr3 + 41896,
    oldPlayerStateAddr3 + 41912,
    oldPlayerStateAddr3 + 41928);
  v246 = GetPlayerStateAddr(&unk_1437E2980);
  sub_14073BE20(v246 + 1638864, oldPlayerStateAddr3 + 55928);
  v247 = GetPlayerStateAddr(&unk_1437E2980);
  sub_140958E30(v247 + 1649776, oldPlayerStateAddr3 + 55952);
  v248 = GetPlayerStateAddr(&unk_1437E2980);
  sub_140959030(v248 + 4165568, oldPlayerStateAddr3 + 342568, *(oldPlayerStateAddr3 + 342564));
  sub_1407B27C0(newPlayerStateAddr2 + 48848, oldPlayerStateAddr3 + 42000);
  v249 = GetPlayerStateAddr(&unk_1437E2980);
  v250 = (*(v249 + 1646040) - *(v249 + 1646032)) / 960i64;
  v251 = 0;
  if ( v250 )
  {
    do
    {
      v252 = GetPlayerStateAddr(&unk_1437E2980);
      v397 = v251;
      if ( v251 == 0xFFFF || (v253 = *(v252 + 1646032), v251 >= ((*(v252 + 1646040) - v253) / 960)) )
        v254 = 0i64;
      else
        v254 = v253 + 960i64 * v251;
      v255 = *(v254 + 588);
      if ( v255 == 2 )
      {
        sub_140824500(v254);
      }
      else if ( v255 <= 1 || v255 == 6 )
      {
        sub_1407C0A70(v254);
        *(v254 + 384) = 0;
      }
      ++v251;
    }
    while ( v251 < v250 );
    oldPlayerStateAddr3 = oldPlayerStateAddr1;
  }
  v256 = *(newPlayerStateAddr2 + 12762);
  if ( v256 < 0 )
    v256 = 0;
  v257 = *(newPlayerStateAddr2 + 12763);
  if ( v256 > v257 )
    v257 = v256;
  v258 = *(newPlayerStateAddr2 + 12764);
  if ( v257 > v258 )
    v258 = v257;
  v259 = *(newPlayerStateAddr2 + 12765);
  if ( v258 > v259 )
    v259 = v258;
  v260 = *(newPlayerStateAddr2 + 12766);
  if ( v259 > v260 )
    v260 = v259;
  v261 = *(newPlayerStateAddr2 + 12767);
  if ( v260 > v261 )
    v261 = v260;
  v262 = *(newPlayerStateAddr2 + 12768);
  if ( v261 > v262 )
    v262 = v261;
  v263 = *(newPlayerStateAddr2 + 12769);
  if ( v262 > v263 )
    v263 = v262;
  if ( *(newPlayerStateAddr2 + 12769) < v263 )
    *(newPlayerStateAddr2 + 12769) = v263;
  *(newPlayerStateAddr2 + 6762) = *(newPlayerStateAddr2 + 6761);
  v264 = 0;
  if ( *(oldPlayerStateAddr3 + 47264) > 0 )
  {
    v265 = 0i64;
    do
    {
      v266 = (v265 + *(oldPlayerStateAddr3 + 47256));
      v267 = *(newPlayerStateAddr2 + 6762);
      if ( *(newPlayerStateAddr2 + 6763) == v267 )
      {
        sub_14076DEB0(newPlayerStateAddr2 + 54088, v267, v266);
      }
      else
      {
        *v267 = *v266;
        v267[1] = v266[1];
        *(newPlayerStateAddr2 + 6762) += 32i64;
      }
      ++v264;
      v265 += 32i64;
    }
    while ( v264 < *(oldPlayerStateAddr3 + 47264) );
  }
  sub_141A39130(oldPlayerStateAddr3 + 41544, oldPlayerStateAddr3 + 41560);
  ++*(newPlayerStateAddr2 + 41);
  if ( *(newPlayerStateAddr2 + 109) >= 0 )
  {
    v268 = sub_1407E4AE0(newPlayerStateAddr2);
    if ( *(newPlayerStateAddr2 + 109) < v268 )
      v268 = *(newPlayerStateAddr2 + 109);
  }
  else
  {
    v268 = sub_1407E4AE0(newPlayerStateAddr2);
  }
  *(newPlayerStateAddr2 + 109) = v268;
  v269 = *(oldPlayerStateAddr3 + 41352);
  *(newPlayerStateAddr2 + 3700) = *(oldPlayerStateAddr3 + 41336);
  *(newPlayerStateAddr2 + 7402) = v269;
  newPlayerStateAddr2[59224] = 1;
  v270 = *(oldPlayerStateAddr3 + 41328);
  *(newPlayerStateAddr2 + 3702) = *(oldPlayerStateAddr3 + 41312);
  *(newPlayerStateAddr2 + 7406) = v270;
  newPlayerStateAddr2[59256] = 1;
  v271 = sub_1407F8D40(newPlayerStateAddr2 + 363896, oldPlayerStateAddr3 + 359928);
  if ( v271 == 2 )
    *(sub_14031E080(&unk_1437E2980) + 13248) = 0;
  v272 = sub_14031DA10(&unk_1437E2980);
  sub_140DC3670(v272 + 1280192, oldPlayerStateAddr3 + 41288, *(oldPlayerStateAddr3 + 41360));
  v273 = dword_1437E29C4;
  if ( !dword_1437E29C4 || dword_1437E29C4 == 6 )
  {
    if ( v271 == 1 )
    {
      sub_140824BA0(newPlayerStateAddr2 + 363896);
      goto LABEL_419;
    }
    if ( !v271 )
    {
      sub_1407C5970(newPlayerStateAddr2 + 363896);
LABEL_419:
      v273 = dword_1437E29C4;
    }
  }
  if ( !v273 )
    v273 = 1;
  v274 = sub_14031D9C0(&unk_1437E2980);
  sub_140B513A0(v274, v273);
  if ( *(sub_14031E140(&unk_1437E2980) + 83016) )
  {
    v275 = sub_14031E140(&unk_1437E2980);
    v276 = sub_141A34F90(v275 + 74160);
    sub_141A3CDB0(v276, *(oldPlayerStateAddr3 + 41304));
  }
  v277 = sub_14031DA10(&unk_1437E2980);
  sub_140E98490(v277 + 1282056, oldPlayerStateAddr3 + 41368);
  v278 = *(newPlayerStateAddr2 + 6792);
  if ( v278 )
  {
    v279 = 0;
    if ( *(newPlayerStateAddr2 + 13590) > 0 )
    {
      v280 = 0i64;
      do
      {
        v281 = *(newPlayerStateAddr2 + 6792);
        if ( *(v281 + v280 + 64) )
          *(v281 + v280 + 64) = 0;
        ++v279;
        v280 += 72i64;
      }
      while ( v279 < *(newPlayerStateAddr2 + 13590) );
      v278 = *(newPlayerStateAddr2 + 6792);
    }
    sub_14221C7D0(&qword_1436D8440, v278, -1);
    *(newPlayerStateAddr2 + 6792) = 0i64;
  }
  v282 = *(newPlayerStateAddr2 + 6793);
  if ( v282 )
  {
    sub_14221C7D0(&qword_1436D8440, v282, -1);
    *(newPlayerStateAddr2 + 6793) = 0i64;
  }
  *(newPlayerStateAddr2 + 6795) = 0i64;
  *(newPlayerStateAddr2 + 13592) = 0;
  *(newPlayerStateAddr2 + 6794) = 0i64;
  v415 = 0ui64;
  v491 = 31i64;
  v490 = 27i64;
  v283 = _mm_load_si128(&xmmword_142A0A5E0);
  v284 = _mm_load_si128(&xmmword_142A0A5F0);
  v285 = _mm_load_si128(&xmmword_142A0A4E0);
  v286 = _mm_loadu_si128(&xmmword_142A88E28);
  v287 = _mm_load_si128(&xmmword_1429EFF70);
  v288 = _mm_and_si128(
           _mm_andnot_si128(_mm_cmpgt_epi8(v286, v284), v287),
           _mm_andnot_si128(_mm_cmpgt_epi8(v283, v286), v287));
  v414 = _mm_or_si128(_mm_and_si128(_mm_sub_epi8(v286, v285), v288), _mm_andnot_si128(v288, v286));
  for ( jj = 16i64; jj < 0x1B; ++jj )
  {
    v290 = *(jj + 0x142A88E28i64);
    v414.m128i_i8[jj] = v290;
    if ( (v290 - 97) <= 0x19u )
      v414.m128i_i8[jj] = v290 - 32;
  }
  if ( jj < 0x20 )
    memset(&v414.m128i_i8[jj], 0, 32 - jj);
  v412 = 0ui64;
  v499 = 31i64;
  v498 = 27i64;
  v291 = _mm_loadu_si128(&xmmword_142A88E48);
  v292 = _mm_and_si128(
           _mm_andnot_si128(_mm_cmpgt_epi8(v291, v284), v287),
           _mm_andnot_si128(_mm_cmpgt_epi8(v283, v291), v287));
  v411 = _mm_or_si128(_mm_and_si128(_mm_sub_epi8(v291, v285), v292), _mm_andnot_si128(v292, v291));
  for ( kk = 16i64; kk < 0x1B; ++kk )
  {
    v294 = *(kk + 0x142A88E48i64);
    v411.m128i_i8[kk] = v294;
    if ( (v294 - 97) <= 0x19u )
      v411.m128i_i8[kk] = v294 - 32;
  }
  if ( kk < 0x20 )
    memset(&v411.m128i_i8[kk], 0, 32 - kk);
  v408 = 0i64;
  v409 = 0i64;
  v497 = 15i64;
  v496 = 12i64;
  for ( ll = 0i64; ll < 0xC; ++ll )
  {
    v296 = *(ll + 0x142A88E68i64);
    *(&v408 + ll) = v296;
    if ( (v296 - 97) <= 0x19u )
      *(&v408 + ll) = v296 - 32;
  }
  if ( ll < 0x10 )
    memset(&v408 + ll, 0, 16 - ll);
  v297 = sub_14031DA10(&unk_1437E2980);
  v298 = *(v297 + 1280680);
  v299 = *(v297 + 1280688);
  if ( v298 != v299 )
  {
    while ( 1 )
    {
      v300 = *v298;
      if ( *(*v298 + 16) == v409 && *(v300 + 8) == v408 )
      {
        v301 = *(v300 + 80);
        if ( v301 >= 0 && v301 < ((*(v300 + 32) - *(v300 + 24)) >> 3) )
          break;
      }
      if ( ++v298 == v299 )
        goto LABEL_460;
    }
    v411 = v414;
    v412 = v415;
  }
LABEL_460:
  v302 = *(oldPlayerStateAddr3 + 47240);
  v303 = &v302[5 * *(oldPlayerStateAddr3 + 47248)];
  if ( v302 != v303 )
  {
    v304 = v302 + 3;
    do
    {
      if ( (*v304 != v415 || *(v304 - 1) != *&v414) && (*v304 != v412 || *(v304 - 1) != *&v411) )
        sub_140831840(newPlayerStateAddr2, *v302, v304 - 1);
      v302 += 5;
      v304 = (v304 + 40);
    }
    while ( v302 != v303 );
  }
  *(newPlayerStateAddr2 + 13640) = *(oldPlayerStateAddr3 + 48352);
  *(newPlayerStateAddr2 + 6819) = *(oldPlayerStateAddr3 + 48344);
  *(newPlayerStateAddr2 + 13644) = *(oldPlayerStateAddr3 + 48376);
  *(newPlayerStateAddr2 + 6821) = *(oldPlayerStateAddr3 + 48368);
  *(newPlayerStateAddr2 + 6823) = *(oldPlayerStateAddr3 + 48384);
  *(newPlayerStateAddr2 + 3412) = _mm_unpacklo_ps(
                                    _mm_unpacklo_ps(
                                      *(oldPlayerStateAddr3 + 48400),
                                      _mm_shuffle_ps(
                                        *(oldPlayerStateAddr3 + 48400),
                                        *(oldPlayerStateAddr3 + 48400),
                                        170)),
                                    _mm_unpacklo_ps(
                                      _mm_shuffle_ps(*(oldPlayerStateAddr3 + 48400), *(oldPlayerStateAddr3 + 48400), 85),
                                      0x3F800000u));
  sub_1406C7880(newPlayerStateAddr2 + 54608, oldPlayerStateAddr3 + 346496);
  *(sub_14031E140(&unk_1437E2980) + 629784) = 0i64;
  v305 = 0;
  if ( *(oldPlayerStateAddr3 + 307336) > 0 )
  {
    v306 = 0i64;
    do
    {
      v307 = (v306 + *(oldPlayerStateAddr3 + 307328));
      v308 = *(newPlayerStateAddr2 + 6837);
      if ( *(newPlayerStateAddr2 + 6838) == v308 )
      {
        sub_14070F740(newPlayerStateAddr2 + 54688, v308, v307);
      }
      else
      {
        *v308 = *v307;
        v308[1] = v307[1];
        v308[2] = v307[2];
        v308[3] = v307[3];
        v308[4] = v307[4];
        v308[5] = v307[5];
        v308[6] = v307[6];
        v308[7] = v307[7];
        v308[8] = v307[8];
        *(newPlayerStateAddr2 + 6837) += 144i64;
      }
      ++v305;
      v306 += 144i64;
    }
    while ( v305 < *(oldPlayerStateAddr3 + 307336) );
  }
  sub_14081C3D0(newPlayerStateAddr2 + 54712, oldPlayerStateAddr3 + 303632);
  v309 = newPlayerStateAddr2 + 58417;
  v310 = newPlayerStateAddr2 + 58417;
  v311 = oldPlayerStateAddr3 + 326080;
  v312 = 9i64;
  do
  {
    if ( v311 != v310 )
    {
      sub_1403324F0(v310, v311, 32i64);
      v312 = v413;
    }
    v311 += 1824i64;
    v310 += 32;
    v413 = --v312;
  }
  while ( v312 );
  v313 = oldPlayerStateAddr3 + 313296;
  v314 = newPlayerStateAddr2 + 58705;
  v315 = newPlayerStateAddr2 + 58705;
  v316 = 7i64;
  do
  {
    if ( v313 != v315 )
    {
      sub_1403324F0(v315, v313, 32i64);
      v316 = v403;
    }
    v313 += 1824i64;
    v315 += 32;
    v403 = --v316;
  }
  while ( v316 );
  v317 = *(oldPlayerStateAddr3 + 342592);
  if ( v317 <= 0 )
    v318 = oldPlayerStateAddr3 + 342600;
  else
    v318 = *(oldPlayerStateAddr3 + 342584) + 32i64 * (v317 - 1);
  sub_1408CDC80(newPlayerStateAddr2 + 58960, v318);
  newPlayerStateAddr2[58996] = *(oldPlayerStateAddr3 + 342636);
  sub_1408CF7F0(newPlayerStateAddr2 + 59008, oldPlayerStateAddr3 + 342640);
  *(newPlayerStateAddr2 + 7398) = *(oldPlayerStateAddr3 + 346392);
  if ( newPlayerStateAddr2[58996] && !*(newPlayerStateAddr2 + 7372) )
  {
    v319 = *(oldPlayerStateAddr3 + 346392);
    if ( v319 )
    {
      *(newPlayerStateAddr2 + 7372) = v319;
    }
    else
    {
      v320 = sub_1407D22C0(newPlayerStateAddr2, oldPlayerStateAddr3);
      *(newPlayerStateAddr2 + 7372) = v320;
      *(newPlayerStateAddr2 + 7398) = v320;
    }
  }
  *(newPlayerStateAddr2 + 7399) = *(oldPlayerStateAddr3 + 346400);
  *(newPlayerStateAddr2 + 14748) = *(oldPlayerStateAddr3 + 342632);
  v321 = _mm_unpacklo_ps(
           _mm_unpacklo_ps(
             *(oldPlayerStateAddr3 + 342800),
             _mm_shuffle_ps(*(oldPlayerStateAddr3 + 342800), *(oldPlayerStateAddr3 + 342800), 170)),
           _mm_unpacklo_ps(
             _mm_shuffle_ps(*(oldPlayerStateAddr3 + 342800), *(oldPlayerStateAddr3 + 342800), 85),
             0x3F800000u));
  v515 = v321;
  v514 = _mm_unpacklo_ps(
           _mm_unpacklo_ps(
             *(oldPlayerStateAddr3 + 342784),
             _mm_shuffle_ps(*(oldPlayerStateAddr3 + 342784), *(oldPlayerStateAddr3 + 342784), 170)),
           _mm_unpacklo_ps(
             _mm_shuffle_ps(*(oldPlayerStateAddr3 + 342784), *(oldPlayerStateAddr3 + 342784), 85),
             0x3F800000u));
  *(newPlayerStateAddr2 + 3697) = v514;
  *(newPlayerStateAddr2 + 3698) = v321;
  for ( mm = 0; mm < 9; ++mm )
  {
    sub_14081BDA0(newPlayerStateAddr2, v309, mm);
    v309 += 32;
  }
  for ( nn = 0; nn < 7; ++nn )
  {
    sub_14081BF30(newPlayerStateAddr2, v314, nn);
    v314 += 32;
  }
  v324 = sub_14031DD80(&unk_1437E2980);
  sub_140F5F640(v324 + 133432, *(oldPlayerStateAddr3 + 345184));
  v325 = sub_14031DA10(&unk_1437E2980);
  sub_141B4CCC0(v325 + 1282528, oldPlayerStateAddr3 + 345192);
  word_143C88CD4 = *(oldPlayerStateAddr3 + 346408);
  word_143C88CD8 = *(oldPlayerStateAddr3 + 346410);
  newPlayerStateAddr2[59281] = *(oldPlayerStateAddr3 + 346412);
  physx::PxJointLinearLimitGeneratedValues::PxJointLinearLimitGeneratedValues(
    (newPlayerStateAddr2 + 59284),
    (oldPlayerStateAddr3 + 346416));
  v513 = _mm_mul_ps(*(oldPlayerStateAddr3 + 346448), *(oldPlayerStateAddr3 + 346448));
  v512 = v513;
  if ( ((v513.m128_f32[0] + _mm_shuffle_ps(v513, v513, 85).m128_f32[0]) + _mm_shuffle_ps(v513, v513, 170).m128_f32[0]) < 2.3283064e-10
    || (v511 = _mm_mul_ps(*(oldPlayerStateAddr3 + 346464), *(oldPlayerStateAddr3 + 346464)),
        v508 = v511,
        ((v511.m128_f32[0] + _mm_shuffle_ps(v511, v511, 85).m128_f32[0]) + _mm_shuffle_ps(v511, v511, 170).m128_f32[0]) < 2.3283064e-10) )
  {
    v504[0] = xmmword_143C79DB0;
    v504[1] = xmmword_143C79DC0;
    v504[2] = xmmword_143C79DD0;
    v504[3] = xmmword_143C79DE0;
    v330 = v504;
  }
  else
  {
    v492 = *&xmmword_1429F0580;
    v493 = *&xmmword_1429F0580;
    v494 = *&xmmword_1429F0580;
    v495 = *&xmmword_1429F0580;
    v494 = *(oldPlayerStateAddr3 + 346448);
    v326 = _mm_shuffle_ps(v494, v494, 201);
    v327 = _mm_shuffle_ps(v494, v494, 210);
    v328 = _mm_sub_ps(
             _mm_mul_ps(v327, _mm_shuffle_ps(*(oldPlayerStateAddr3 + 346464), *(oldPlayerStateAddr3 + 346464), 201)),
             _mm_mul_ps(_mm_shuffle_ps(*(oldPlayerStateAddr3 + 346464), *(oldPlayerStateAddr3 + 346464), 210), v326));
    v521 = _mm_mul_ps(v328, v328);
    v518 = v521;
    v329 = 0i64;
    v329.m128_f32[0] = 1.0
                     / fsqrt(
                         (v521.m128_f32[0] + _mm_shuffle_ps(v521, v521, 85).m128_f32[0])
                       + _mm_shuffle_ps(v521, v521, 170).m128_f32[0]);
    v510 = v329;
    v509 = v329;
    v492 = _mm_mul_ps(_mm_shuffle_ps(v329, v329, 0), v328);
    v493 = _mm_sub_ps(
             _mm_mul_ps(_mm_shuffle_ps(v492, v492, 210), v326),
             _mm_mul_ps(v327, _mm_shuffle_ps(v492, v492, 201)));
    v330 = &v492;
  }
  *(newPlayerStateAddr2 + 3707) = *v330;
  *(newPlayerStateAddr2 + 3708) = v330[1];
  *(newPlayerStateAddr2 + 3709) = v330[2];
  *(newPlayerStateAddr2 + 3710) = v330[3];
  *(newPlayerStateAddr2 + 3710) = *(oldPlayerStateAddr3 + 346480);
  newPlayerStateAddr2[363872] = *(oldPlayerStateAddr3 + 346576);
  newPlayerStateAddr2[363873] = *(oldPlayerStateAddr3 + 346580);
  v331 = *(oldPlayerStateAddr3 + 346584);
  newPlayerStateAddr2[363874] = v331;
  *(newPlayerStateAddr2 + 363880) = *(oldPlayerStateAddr3 + 346592);
  if ( newPlayerStateAddr2[363872] == -1 || newPlayerStateAddr2[363873] == -1 || v331 == -1 )
  {
    sub_1420908B0(&v376);
    v332 = *(newPlayerStateAddr2 + 61590);
    v406 = 0i64;
    v407 = 0i64;
    v333 = 0;
    v378 = 0;
    v334 = 0i64;
    if ( *(v332 + 8) > 0 )
    {
      v335 = 0;
      do
      {
        v336 = 192i64 * v335;
        if ( !*(v336 + *v332 + 136) && !*(v336 + *v332 + 144) )
        {
          if ( v407 == v334 )
          {
            sub_1403272C0(&v406, v334, &v378);
            v334 = *(&v406 + 1);
          }
          else
          {
            *v334 = v333;
            v334 = (*(&v406 + 1) + 4i64);
            *(&v406 + 1) += 4i64;
          }
          v333 = v378;
        }
        v378 = ++v333;
        v335 = v333;
      }
      while ( v333 < *(v332 + 8) );
    }
    v337 = ((v334 - v406) >> 2);
    v338 = v377 + 1517746329i64 * v376;
    v376 = v377 + 1517746329 * v376;
    v377 = HIDWORD(v338);
    newPlayerStateAddr2[363872] = *(v406 + 4i64 * ((v337 * v376) >> 32));
    v339 = v377 + 1517746329i64 * v376;
    v376 = v377 + 1517746329 * v376;
    v377 = HIDWORD(v339);
    newPlayerStateAddr2[363873] = (20 * v376) >> 32;
    v340 = v377 + 1517746329i64 * v376;
    v376 = v377 + 1517746329 * v376;
    v377 = HIDWORD(v340);
    newPlayerStateAddr2[363874] = (20 * v376) >> 32;
    sub_1402CD020(&v406);
  }
  sub_14081DD20(newPlayerStateAddr2);
  v341 = *(oldPlayerStateAddr3 + 346608) != 2 && !*(oldPlayerStateAddr3 + 47804);
  if ( !v567 )
  {
    v342 = GetPlayerStateAddr(&unk_1437E2980);
    sub_14095AFA0(v342 + 1619984, oldPlayerStateAddr3, v341);
  }
  *(newPlayerStateAddr2 + 6075) = *(newPlayerStateAddr2 + 6074);
  if ( *(oldPlayerStateAddr3 + 41584) > 0 )
  {
    v343 = *(oldPlayerStateAddr3 + 41584);
    sub_1407AB320(newPlayerStateAddr2 + 48592, v343, newPlayerStateAddr2 + 48592);
    if ( v343 > 0 )
    {
      v344 = 0i64;
      do
      {
        *(*(newPlayerStateAddr2 + 6074) + v344) = *(v344 + *(oldPlayerStateAddr3 + 41576));
        v344 += 16i64;
        --v343;
      }
      while ( v343 );
    }
  }
  v345 = *(oldPlayerStateAddr3 + 360024);
  for ( i1 = &v345[*(oldPlayerStateAddr3 + 360032)]; v345 != i1; ++v345 )
  {
    v425 = *v345;
    sub_14045A190(newPlayerStateAddr2 + 364200, &v375, &v425);
    v347 = DWORD2(v375);
    if ( !DWORD2(v375) )
      Concurrency::target_block<Concurrency::multi_link_registry<Concurrency::ISource<int>>,Concurrency::ordered_message_processor<int>>::process_input_messages(
        (newPlayerStateAddr2 + 364200),
        0i64);
    if ( DWORD2(v375) != 1 )
    {
      if ( DWORD2(v375) == 2 )
      {
        *(*(newPlayerStateAddr2 + 45527) + 16 * v375) = v425;
      }
      else if ( DWORD2(v375) == 3 )
      {
        *(*(newPlayerStateAddr2 + 45527) + 16 * v375) = v425;
      }
    }
    v381 = v347 != 1;
  }
  v348 = *(oldPlayerStateAddr3 + 360040);
  for ( i2 = &v348[*(oldPlayerStateAddr3 + 360048)]; v348 != i2; ++v348 )
  {
    v426 = *v348;
    sub_14045A190(newPlayerStateAddr2 + 364264, &v375, &v426);
    v350 = DWORD2(v375);
    if ( !DWORD2(v375) )
      Concurrency::target_block<Concurrency::multi_link_registry<Concurrency::ISource<int>>,Concurrency::ordered_message_processor<int>>::process_input_messages(
        (newPlayerStateAddr2 + 364264),
        0i64);
    if ( DWORD2(v375) != 1 )
    {
      if ( DWORD2(v375) == 2 )
      {
        *(*(newPlayerStateAddr2 + 45535) + 16 * v375) = v426;
      }
      else if ( DWORD2(v375) == 3 )
      {
        *(*(newPlayerStateAddr2 + 45535) + 16 * v375) = v426;
      }
    }
    v382 = v350 != 1;
  }
  v351 = *(oldPlayerStateAddr3 + 360056);
  for ( i3 = &v351[*(oldPlayerStateAddr3 + 360064)]; v351 != i3; ++v351 )
  {
    v427 = *v351;
    sub_14045A190(newPlayerStateAddr2 + 364328, &v375, &v427);
    v353 = DWORD2(v375);
    if ( !DWORD2(v375) )
      Concurrency::target_block<Concurrency::multi_link_registry<Concurrency::ISource<int>>,Concurrency::ordered_message_processor<int>>::process_input_messages(
        (newPlayerStateAddr2 + 364328),
        0i64);
    if ( DWORD2(v375) != 1 )
    {
      if ( DWORD2(v375) == 2 )
      {
        *(*(newPlayerStateAddr2 + 45543) + 16 * v375) = v427;
      }
      else if ( DWORD2(v375) == 3 )
      {
        *(*(newPlayerStateAddr2 + 45543) + 16 * v375) = v427;
      }
    }
    v383 = v353 != 1;
  }
  v354 = -1;
  v549[0] = 0;
  v549[128] = 0;
  v549[192] = 0;
  v550[0] = 0;
  AK::MemoryMgr::StartProfileThreadUsage(v550);
  memset(v549, 0, sizeof(v549));
  sub_14080EB40(v550);
  v355 = sub_1402E9380();
  v396 = (*(**(v355 + 8) + 40i64))(*(v355 + 8), v549);
  *(newPlayerStateAddr2 + 123104) = *(oldPlayerStateAddr3 + 488080);
  v356 = newPlayerStateAddr2 + 364416;
  do
  {
    sub_1408CEDF0(v356);
    v357 = GetPlayerStateAddr(&unk_1437E2980);
    if ( sub_140463AD0(v357 + 1636528, v356, v549, &v396) )
      v354 = v21;
    ++v21;
    v356 += 1280;
  }
  while ( v21 < 100 );
  if ( v354 != -1 )
  {
    v358 = GetPlayerStateAddr(&unk_1437E2980);
    sub_140465D80(v358 + 1636528, &newPlayerStateAddr2[1280 * v354 + 364416], 0i64);
  }
  if ( (oldPlayerStateAddr3 + 52) != newPlayerStateAddr2 + 492420 )
    sub_1403324F0(newPlayerStateAddr2 + 492420, oldPlayerStateAddr3 + 52, 128i64);
  if ( (oldPlayerStateAddr3 + 180) != newPlayerStateAddr2 + 492548 )
    sub_1403324F0(newPlayerStateAddr2 + 492548, oldPlayerStateAddr3 + 180, 128i64);
  sub_140804B90(newPlayerStateAddr2);
  sub_1407B2820(newPlayerStateAddr2 + 363712, oldPlayerStateAddr3 + 488088);
  newPlayerStateAddr2[59279] = 1;
  if ( v400 )
    sub_14221C7D0(&qword_1436D8440, v400, -1);
  sub_14045AD20(v549);
  sub_1402E58C0(v551, v359, v360, v361);
  sub_1402E58C0(v555, v362, v363, v364);
  sub_1402CD020(&v416);
}