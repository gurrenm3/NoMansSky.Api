using Reloaded.ModHelper;

namespace NoMansSky.Api
{
    /// <summary>
    /// Manages all Reality mbin files in the API.
    /// </summary>
    internal class RealityManager : IRealityManager
    {
        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IRealityManagerFile DefaultReality { get; } = new RealityManagerFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IJourneyFile Journey { get; } = new JourneyFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IWikiFile Wiki { get; } = new WikiFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IWikiFile Catalogue { get; } = new WikiFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IBaseBuildingPartsDataFile BaseBuildingAutoGeneratedParts { get; } = new BaseBuildingPartsDataFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IBaseBuildingCostsFile BaseBuildingCosts { get; } = new BaseBuildingCostsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IBaseBuildingPartsFile BaseBuildingParts { get; } = new BaseBuildingPartsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IBaseBuildingFile BaseBuildingObjects { get; } = new BaseBuildingFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IBaseBuildingFile BaseBuildingTable { get; } = new BaseBuildingFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ICombatEffectsFile CombatEffects { get; } = new CombatEffectsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IPlayerDamageFile PlayerDamageTable { get; } = new PlayerDamageFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IDialogClearanceFile DialogClearance { get; } = new DialogClearanceFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ICostsFile CostTable { get; } = new CostsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IConsumableItemsFile ConsumableItems { get; } = new ConsumableItemsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IDiscoveryRewardsFile DiscoveryRewards { get; } = new DiscoveryRewardsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IExpeditionEventsFile ExpeditionEvents { get; } = new ExpeditionEventsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IExpeditionRewardsFile ExpeditionRewards { get; } = new ExpeditionRewardsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IFrigateFlybyFile FrigateFlybyTable { get; } = new FrigateFlybyFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IFreighterDungeonsFile FreighterDungeons { get; } = new FreighterDungeonsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IFreighterTraitFile FreighterTraits { get; } = new FreighterTraitFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IGeneratedBaseTemplatesFile GeneratedBaseTemplates { get; } = new GeneratedBaseTemplatesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IInventoriesFile InventoryTable { get; } = new InventoriesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IBaseBuildingFile LegacyBaseBuildingObjects { get; } = new BaseBuildingFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ILegacyItemsFile LegacyItems { get; } = new LegacyItemsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IMaintenanceGroupsFile MaintenanceGroups { get; } = new MaintenanceGroupsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IAlienPuzzlesFile AlienPuzzles { get; } = new AlienPuzzlesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IProceduralTechnologiesFile ProceduralTechnologies_NMS { get; } = new ProceduralTechnologiesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IAlienSpeechFile AlienSpeechTable { get; } = new AlienSpeechFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IProductsFile Products_NMS { get; } = new ProductsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IRecipesFile Recipies { get; } = new RecipesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ISubstancesFile Substances_NMS { get; } = new SubstancseFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ITechnologiesFile Technologies_NMS { get; } = new TechnologiesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IPurchaseableBuildingBluprintsFile PurchaseableBuildingBluprints { get; } = new PurchaseableBuildingBluprintsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IProceduralTechnologiesFile ProceduralTechnologies { get; } = new ProceduralTechnologiesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IProceduralProductsFile ProceduralProducts { get; } = new ProceduralProductsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IPlayerWeaponPropertiesFile PlayerWeaponProperties { get; } = new PlayerWeaponPropertiesFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IPurchaseableSpecialsFile PurchaseableSpecials { get; } = new PurchaseableSpecialsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IRewardsFile Rewards { get; } = new RewardsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ISettlementPerksFile SettlementPerks { get; } = new SettlementPerksFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ITechBoxFile TechBox { get; } = new TechBoxFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public ITradingClassFile TradingClass { get; } = new TradingClassFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IItemCostsFile TradingItemCosts { get; } = new ItemCostsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IUnlockableItemsFile UnlockableItems { get; } = new UnlockableItemsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IUnlockableSeasonRewardsFile UnlockableSeasonRewards { get; } = new UnlockableSeasonRewardsFile();

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        public IUnlockableTwitchRewards UnlockableTwitchRewards { get; } = new UnlockableTwitchRewards();


        public RealityManager()
        {
            IGame.Instance.MBinManager.OnMBinLoaded.AddListener(mbin =>
            {
                if (mbin.FullName.ToUpper().Contains("METADATA/REALITY"))
                    TryRegisterMBin(mbin);
            });
        }

        private void TryRegisterMBin(IMBin mbin)
        {
            string name = mbin.Name.ToUpper();
            string fullname = mbin.FullName.ToUpper();

            IMBinWrapper wrapperMbin = null;
            if (name == "DEFAULTREALITY")
            {
                wrapperMbin = DefaultReality;
            }
            else if (name == "WIKI")
            {
                wrapperMbin = Wiki;
            }
            else if (name == "CATALOGUE")
            {
                wrapperMbin = Catalogue;
            }
            else if (name == "JOURNEY")
            {
                wrapperMbin = Journey;
            }
            else if (name == "NMS_REALITY_GCTECHNOLOGYTABLE")
            {
                wrapperMbin = Technologies_NMS;
            }
            else if (name == "NMS_REALITY_GCSUBSTANCETABLE")
            {
                wrapperMbin = Substances_NMS;
            }
            else if (name == "NMS_REALITY_GCPRODUCTTABLE")
            {
                wrapperMbin = Products_NMS;
            }
            else if (name == "PROCEDURALPRODUCTTABLE")
            {
                wrapperMbin = ProceduralProducts;
            }
            else if (name == "NMS_REALITY_GCPROCEDURALTECHNOLOGYTABLE")
            {
                wrapperMbin = ProceduralTechnologies_NMS;
            }
            else if (name == "LEGACYITEMTABLE")
            {
                wrapperMbin = LegacyItems;
            }
            else if (name == "TECHBOXTABLE")
            {
                wrapperMbin = TechBox;
            }
            else if (name == "CONSUMABLEITEMTABLE")
            {
                wrapperMbin = ConsumableItems;
            }
            else if (name == "NMS_REALITY_GCRECIPETABLE")
            {
                wrapperMbin = Recipies;
            }
            else if (name == "NMS_DIALOG_GCALIENSPEECHTABLE")
            {
                wrapperMbin = AlienSpeechTable;
            }
            else if (name == "REWARDTABLE")
            {
                wrapperMbin = Rewards;
            }
            else if (name == "DISCOVERYREWARDLOOKUPTABLE")
            {
                wrapperMbin = DiscoveryRewards;
            }
            else if (name == "INVENTORYTABLE")
            {
                wrapperMbin = InventoryTable;
            }
            else if (name == "COSTTABLE")
            {
                wrapperMbin = CostTable;
            }
            else if (name == "DAMAGETABLE")
            {
                wrapperMbin = PlayerDamageTable;
            }
            else if (name == "PURCHASEABLEBUILDINGBLUEPRINTS")
            {
                wrapperMbin = PurchaseableBuildingBluprints;
            }
            else if (name == "PURCHASEABLESPECIALS")
            {
                wrapperMbin = PurchaseableSpecials;
            }
            else if (name == "UNLOCKABLESEASONREWARDS")
            {
                wrapperMbin = UnlockableSeasonRewards;
            }
            else if (name == "UNLOCKABLETWITCHREWARDS")
            {
                wrapperMbin = UnlockableTwitchRewards;
            }
            else if (name == "TRADINGCOSTTABLE")
            {
                wrapperMbin = TradingItemCosts;
            }
            else if (name == "TRADINGCLASSDATATABLE")
            {
                wrapperMbin = TradingClass;
            }
            else if (name == "MAINTENANCEGROUPSTABLE")
            {
                wrapperMbin = MaintenanceGroups;
            }
            else if (name == "UNLOCKABLEITEMTREES")
            {
                wrapperMbin = UnlockableItems;
            }
            else if (name == "SETTLEMENTPERKSTABLE")
            {
                wrapperMbin = SettlementPerks;
            }
            else if (name == "PLAYERWEAPONPROPERTIESTABLE")
            {
                wrapperMbin = PlayerWeaponProperties;
            }
            else if (name == "COMBATEFFECTSTABLE")
            {
                wrapperMbin = CombatEffects;
            }
            else if (name == "DIALOGCLEARANCETABLE")
            {
                wrapperMbin = DialogClearance;
            }
            else if (name == "NMS_DIALOG_GCALIENPUZZLETABLE")
            {
                wrapperMbin = AlienPuzzles;
            }
            else if (name == "FRIGATETRAITTABLE")
            {
                wrapperMbin = FreighterTraits;
            }
            else if (name == "EXPEDITIONEVENTTABLE")
            {
                wrapperMbin = ExpeditionEvents;
            }
            else if (name == "EXPEDITIONREWARDTABLE")
            {
                wrapperMbin = ExpeditionRewards;
            }
            else if (name == "FRIGATEFLYBYTABLE")
            {
                wrapperMbin = FrigateFlybyTable;
            }
            else if (name == "BASEBUILDINGOBJECTSTABLE")
            {
                wrapperMbin = BaseBuildingObjects;
            }
            else if (name == "BASEBUILDINGPARTSTABLE")
            {
                wrapperMbin = BaseBuildingParts;
            }
            else if (name == "BASEBUILDINGAUTOGENERATEDPARTSDATA")
            {
                wrapperMbin = BaseBuildingAutoGeneratedParts;
            }
            else if (name == "GENERATEDBASETEMPLATESTABLE")
            {
                wrapperMbin = GeneratedBaseTemplates;
            }
            else
            {
                //Mod.WriteLine($"Tried loading an unsupported Reality mbin: {name}", LogLevel.Error);
                Mod.WriteLine($"{mbin.Name} doesn't have it's own wrapper. You'll need to use MBinManager to access it until a wrapper is created.", LogLevel.Warning);
                return;
            }

            wrapperMbin.MBin = mbin;
            wrapperMbin.OnLoaded.Invoke();
        }
    }
}
